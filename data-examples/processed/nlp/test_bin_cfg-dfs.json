{
  "loc.imp._ITM_deregisterTMCloneTable": "jg 0x47 add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al fadd dword [rdx] add byte [rax] al add byte [rax] al add byte [rax] al fadd dword [rdx] add byte [rax] al add byte [rax] al add byte [rax] al or byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add eax dword [rax] add byte [rax] al add al 0 add byte [rax] al add byte [rax] al add byte [rax] dl add byte [rax] al add byte [rax] al add byte [rax] al add dword [rax] eax add byte [rax] al add al 0 add byte [rax] al add byte [rax] ah add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] ah add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] ah add byte [rax] al add byte [rax] al add byte [rax] al mov eax 1 add byte [rax] al add byte [rax + 1] bh add byte [rax] al add byte [rax] al adc byte [rax] al add byte [rax] al add byte [rax] al add byte [rcx] al add byte [rax] al add byte [rsi] al add byte [rax] al add byte [rax + IMM] bh add byte [rax] al add byte [rax + IMM] bh add byte [rax] al add byte [rax + IMM] bh add byte [rax] al add byte [rax + 2] bl add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add r8b byte [rcx] add dword [rax] eax add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add eax dword [rax] add byte ds:[rcx] al add byte [rax] al add byte [rax + IMM] ah add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax + IMM] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al cmp byte [rax] al or eax MEM add byte [rsi] bl add byte [rsi] al add byte [rax] al add byte [rax + rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al fadd dword [rdx] add byte [rax] al add byte [rax] al add byte [rax] al fadd dword [rdx] add byte [rax] al add byte [rax] al add byte [rax] al or byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add eax dword [rax] add byte [rax] al add al 0 add byte [rax] al sbb byte [rbx] al add byte [rax] al add byte [rax] al add byte [rax] al sbb byte [rbx] al add byte [rax] al add byte [rax] al add byte [rax] al sbb byte [rbx] al add byte [rax] al add byte [rax] al add byte [rax] al sbb al 0 add byte [rax] al add byte [rax] al add byte [rax] al sbb al 0 add byte [rax] al add byte [rax] al add byte [rax] al add dword [rax] eax add byte [rax] al add byte [rax] al add byte [rax] al add dword [rax] eax add byte [rax] al add al 0 add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rsi] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rsi] al add byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] dl add byte [rax] al add byte [rax] al add byte [rax] al add dword [rax] eax add byte [rax] al add eax 0 adc byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al adc byte [rax] al add byte [rax] al add byte [rax] al add byte [rax] al adc byte [rax] al add byte [rax] al add byte [rax] al add byte [rbp + 2] dh add byte [rax] al add byte [rax] al add byte [rax] al jne MEM",
  "main": "endbr64 push rbp mov rbp rsp sub rsp 0x10 lea rdi STR mov eax 0 call FUNC mov dword [rbp - 8] 0 cmp dword [rbp - 8] 1 je MEM lea rdi STR mov eax 0 call FUNC cmp dword [rbp - 4] 0xa jne MEM lea rdi STR mov eax 0 call FUNC lea rdi STR mov eax 0 call FUNC jmp MEM mov eax 0 leave ret lea rdi STR mov eax 0 call FUNC jmp MEM lea rdi STR mov eax 0 call FUNC jmp MEM mov eax dword [rbp - 8] add eax 1 mov dword [rbp - 4] eax cmp dword [rbp - 4] 0 je MEM",
  "sym.__do_global_dtors_aux": "endbr64 cmp byte DATA 0 jne MEM ret push rbp cmp qword FUNC 0 mov rbp rsp je MEM call FUNC mov byte DATA 1 pop rbp ret mov rdi qword DATA call FUNC"
}