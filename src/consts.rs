// FEATURE MAPS

pub const GEMINI_FEATURE_MAP: [&str; 7] = [
    "num calls",
    "num transfer",
    "num arith",
    "num ins",
    "numeric consts",
    "string consts",
    "num offspring",
];

pub const DISCOVRE_FEATURE_MAP: [&str; 6] = [
    "num call ops",
    "num transfer ops",
    "num arith ops",
    "num ins",
    "numeric consts",
    "string consts",
];

pub const DGIS_FEATURE_MAP: [&str; 8] = [
    "num stack ops",
    "num artih ops",
    "num logic ops",
    "num cmp ops",
    "num lib calls",
    "num uncon jmps",
    "num con jmps",
    "num generic ins",
];

// REGISTERS BY SIZE
// Link to FP regs https://software-dl.ti.com/codegen/docs/tiarmclang/compiler_tools_user_guide/compiler_manual/runtime_environment/register-conventions-stdz0543031.html

pub const GENERAL_PURPOSE_32_BIT_REGS: [&str; 165] = [
    "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "v0", "v1", "v2", "v3",
    "v4", "v5", "v6", "v7", "v8", "v9", "v10", "v11", "v12", "v13", "v14", "v15", "v16", "v17",
    "v18", "v19", "v20", "v21", "v22", "v23", "v24", "v25", "v26", "v27", "v28", "v29", "v30",
    "v31", "eax", "ebx", "ecx", "edx", "esi", "edi", "r8d", "r9d", "r10d", "r11d", "r12d", "r13d",
    "r14d", "r15d", "w0", "w1", "w2", "w3", "w4", "w5", "w6", "w7", "w8", "w9", "w10", "w11",
    "w12", "w13", "w14", "w15", "w16", "w17", "w18", "w19", "w20", "w21", "w22", "w23", "w24",
    "w25", "w26", "w27", "w28", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9", "s10",
    "s11", "s12", "s13", "s14", "s15", "s16", "s17", "s18", "s19", "s20", "s21", "s22", "s23",
    "s24", "s25", "s26", "s27", "s29", "s30", "s31", "f0", "f1", "f2", "f3", "f4", "f5", "f6",
    "f7", "f8", "f9", "f10", "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", "f19", "f20",
    "f21", "f22", "f23", "f24", "f25", "f26", "f27", "f29", "f30", "f31", "v0", "v1", "a0", "a1",
    "a2", "a3", "t0", "t1", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9", "s0",
];
// MIPS registers are normalised to 32 bit always - This is because the name of the registers
// is always the same regardless of architecture - Different to x86/x64.
pub const GENERAL_PURPOSE_64_BIT_REGS: [&str; 75] = [
    "x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10", "x11", "x12", "x13", "x14",
    "x15", "x16", "x17", "x18", "x19", "x20", "x21", "x22", "x23", "x24", "x25", "x26", "x27",
    "x28", "rax", "rbx", "rcx", "rdx", "rsi", "rdi", "r8", "r9", "r10", "r11", "r12", "r13", "r14",
    "r15", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "d10", "d11", "d12", "d13",
    "d14", "d15", "d16", "d17", "d18", "d19", "d20", "d21", "d22", "d23", "d24", "d25", "d26",
    "d27", "d29", "d30", "d31", "x30",
];

//Risc-V Specific 32-bit Registers - Using the ABI names here https://en.wikichip.org/wiki/risc-v/registers
pub const RISCV_32_BIT_REGS: [&str; 12] = [
    "t0", "t1", "t2", "s1", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7",
];

pub const MULTI_ARCH_FRAME_POINTERS: [&str; 7] = [
    "r11", // arm32
    "x29", // aarch64 - 64 bit version
    "w29", // aarch64 - 32 bit version
    "EBP", // x86
    "RBP", // x86-64
    "fp",  // MIPS / RISC-V
    "s0",  // RISC-V
];

// INSTRUCTION CATEGORIES

// x86/64
pub const X86_ARITHMETIC: [&str; 145] = [
    "kaddw",
    "hsubps",
    "imul",
    "vfmadd132pd",
    "cdq",
    "kaddd",
    "kaddq",
    "hsubpd",
    "fisub",
    "kaddb",
    "pmaxsq",
    "maxsd",
    "divps",
    "psubusb",
    "divpd",
    "add",
    "pmaxsb",
    "adc",
    "fadd",
    "pmaxub",
    "mulsd",
    "aad",
    "fmulp",
    "dppd",
    "fdivp",
    "fsin",
    "pmulhuw",
    "das",
    "not",
    "aaa",
    "dpps",
    "adcx",
    "pmaxsw",
    "mulps",
    "roundsd",
    "pmuldq",
    "div",
    "mulpd",
    "daa",
    "psubd",
    "psubb",
    "pminuw",
    "pminuq",
    "addsubps",
    "psubq",
    "addsubpd",
    "pminub",
    "fsubrp",
    "sub",
    "pavgw",
    "sqrtsd",
    "xadd",
    "phsubd",
    "pmulhw",
    "mul",
    "phsubsw",
    "pmaddwd",
    "cwd",
    "pavgb",
    "paddusw",
    "addpd",
    "sbb",
    "fidiv",
    "mulx",
    "paddusb",
    "pmuludq",
    "aam",
    "phsubw",
    "addps",
    "fcos",
    "fprem1",
    "pminsb",
    "pminsd",
    "cbw",
    "pminsq",
    "f2xm1",
    "minsd",
    "or",
    "fyl2x",
    "fsub",
    "pmullq",
    "pmaddubsw",
    "fmul",
    "psubusw",
    "fyl2xp1",
    "fsqrt",
    "subsd",
    "maxps",
    "roundpd",
    "faddp",
    "sqrtps",
    "pmaxsd",
    "haddpd",
    "rsqrtps",
    "fpatan",
    "adox",
    "haddps",
    "pmulhrsw",
    "phaddsw",
    "paddsw",
    "fisubr",
    "frndint",
    "roundps",
    "phminposuw",
    "fdiv",
    "paddsb",
    "fsubp",
    "aas",
    "fsubr",
    "dec",
    "neg",
    "addsd",
    "psubsw",
    "maxpd",
    "pmullw",
    "psubsb",
    "pmulld",
    "pminsw",
    "pminud",
    "sqrtpd",
    "inc",
    "pmaxuw",
    "minps",
    "paddb",
    "fabs",
    "phaddd",
    "idiv",
    "paddw",
    "pmaxud",
    "minpd",
    "fsincos",
    "paddq",
    "phaddw",
    "fiadd",
    "fprem",
    "paddd",
    "fptan",
    "cwde",
    "pmaxuq",
    "subpd",
    "divsd",
    "fimul",
    "fscale",
    "subps",
    "psadbw",
];

pub const X86_LOGIC: [&str; 70] = [
    "and", "kandb", "kandd", "kandw", "kandq", "kandnb", "kandnd", "kandnw", "kandnq", "kshiftrq",
    "kshiftrw", "kshiftrb", "kshiftrd", "kshiftld", "kshiftlb", "kshiftlw", "kshiftlq", "rol",
    "sal", "pslld", "psllw", "psllq", "andpd", "sar", "sarx", "ror", "rorx", "andps", "andn",
    "xor", "kxorw", "kxorb", "kxorq", "kxord", "rcr", "rcl", "test", "ptest", "not", "knotb",
    "knotd", "knotq", "knotw", "shr", "shrx", "shrd", "andnpd", "xorpd", "pxor", "andnps", "shl",
    "shlx", "or", "korb", "kord", "korw", "korq", "kortestb", "kortestd", "kortestw", "kortestq",
    "shld", "psrlq", "psrlw", "psrlb", "psrld", "psrad", "psrab", "psraq", "psraw",
];

pub const X86_STACK: [&str; 15] = [
    "push", "pop", "pusha", "popa", "pushad", "popad", "pushf", "popf", "popal", "pushd", "popd",
    "popfd", "popfq", "pushfd", "pushfq",
];

pub const X86_UNCOND: [&str; 11] = [
    "iret", "int", "jmp", "ret", "leave", "iretd", "into", "int1", "syscall", "sysenter", "sysexit",
];

pub const X86_COND: [&str; 35] = [
    "jnp", "jnz", "jnc", "jnb", "jnae", "jng", "jno", "jnl", "jae", "jnge", "jne", "loope", "jle",
    "jge", "jcxz", "jecxz", "jp", "js", "jl", "jo", "jnbe", "je", "ja", "jb", "jc", "jg", "jnle",
    "loop", "jpo", "jpe", "jbe", "jz", "jns", "loopne", "jna",
];

pub const X86_TRANSFER: [&str; 90] = [
    "bndldx",
    "bndmk",
    "bndmov",
    "bndstx",
    "cmova",
    "cmovz",
    "cmovpo",
    "cmovpe",
    "cmovp",
    "cmovo",
    "cmovnz",
    "cmovnp",
    "cmovno",
    "cmovng",
    "cmovl",
    "fist",
    "fistp",
    "fisttp",
    "fsave",
    "kmovb",
    "kmovd",
    "kmovq",
    "kmovw",
    "lddqu",
    "lds",
    "lea",
    "lods",
    "lodsb",
    "lodsd",
    "lodsq",
    "lodsw",
    "lss",
    "lsl",
    "mov",
    "movapd",
    "movaps",
    "movbe",
    "movd",
    "movddup",
    "movdq2q",
    "movdqa",
    "movdqu",
    "movhlps",
    "movhpd",
    "movhps",
    "movlhps",
    "movlpd",
    "movlps",
    "movq",
    "movs",
    "movsb",
    "movsd",
    "movntq",
    "movntdq",
    "movmskps",
    "movsq",
    "movss",
    "movsw",
    "movsx",
    "movsxd",
    "movupd",
    "movups",
    "movzx",
    "pmovmskb",
    "pmovsx",
    "pmovzx",
    "push",
    "pusha",
    "pushad",
    "pushf",
    "stos",
    "stosb",
    "stosd",
    "stosq",
    "stosw",
    "vbroadcast",
    "vexpandpd",
    "vexpandps",
    "vmovdqa32",
    "vmovdqa64",
    "vmovdqu16",
    "vmovdqu32",
    "vmovdqu64",
    "vmovdqu8",
    "vpbroadcast",
    "vpbroadcastb",
    "vpexpandd",
    "vpexpandq",
    "movb",
    "movq",
];

pub const X86_CALL: [&str; 1] = ["call"];

pub const X86_COMPARE: [&str; 23] = [
    "cmps",
    "ptest",
    "xtest",
    "cmpsq",
    "ficomp",
    "cmpsw",
    "fcomip",
    "cmpsb",
    "cmpxchg8b",
    "cmpsd",
    "fcomp",
    "cmpxchg16b",
    "test",
    "ficom",
    "fcomi",
    "ucomisd",
    "ftst",
    "cmpxchg",
    "comisd",
    "fcompp",
    "cmppd",
    "cmpps",
    "cmp",
];

// ARM

pub const ARM_ARITHMETIC: [&str; 2048] = [
    "sub",
    "subeq",
    "subne",
    "submi",
    "subpl",
    "subvs",
    "subvc",
    "subhi",
    "subls",
    "subge",
    "sublt",
    "subgt",
    "suble",
    "subal",
    "sublo",
    "subcc",
    "subhs",
    "subcs",
    "subnv",
    "subs",
    "subeqs",
    "subnes",
    "submis",
    "subpls",
    "subvss",
    "subvcs",
    "subhis",
    "sublss",
    "subges",
    "sublts",
    "subgts",
    "subles",
    "subals",
    "sublos",
    "subccs",
    "subhss",
    "subcss",
    "subnvs",
    "subseq",
    "subsne",
    "subsmi",
    "subspl",
    "subsvs",
    "subsvc",
    "subshi",
    "subsls",
    "subsge",
    "subslt",
    "subsgt",
    "subsle",
    "subsal",
    "subslo",
    "subscc",
    "subshs",
    "subscs",
    "subsnv",
    "add",
    "addeq",
    "addne",
    "adds",
    "addle",
    "addls",
    "addgt",
    "addlo",
    "addhs",
    "addhi",
    "addge",
    "addlt",
    "adc",
    "adceq",
    "adceqs",
    "adcne",
    "adcnes",
    "adcnv",
    "adcnvs",
    "adcmi",
    "adcmis",
    "adcpl",
    "adcpls",
    "adcvs",
    "adcvss",
    "adcvc",
    "adcvcs",
    "adchi",
    "adchis",
    "adchs",
    "adchss",
    "adcls",
    "adclss",
    "adclt",
    "adclts",
    "adcle",
    "adcles",
    "adclo",
    "adclos",
    "adcge",
    "adcges",
    "adcgt",
    "adcgts",
    "adcal",
    "adcals",
    "adccc",
    "adcccs",
    "adccs",
    "adccss",
    "adcs",
    "adcseq",
    "adcsne",
    "adcsnv",
    "adcsmi",
    "adcspl",
    "adcsvs",
    "adcsvc",
    "adcshi",
    "adcshs",
    "adcsls",
    "adcslt",
    "adcsle",
    "adcslo",
    "adcsge",
    "adcsgt",
    "adcsal",
    "adcscc",
    "adcscs",
    "rsb",
    "rsbmi",
    "rsbne",
    "rsbhs",
    "ldrsb",
    "rsbs",
    "rsbpl",
    "rsble",
    "rsbhi",
    "sbcs",
    "sbc",
    "qadd",
    "qaddeq",
    "qaddne",
    "qaddnv",
    "qaddmi",
    "qaddpl",
    "qaddvs",
    "qaddvc",
    "qaddhi",
    "qaddhs",
    "qaddls",
    "qaddlt",
    "qaddle",
    "qaddlo",
    "qaddge",
    "qaddgt",
    "qaddal",
    "qaddcc",
    "qaddcs",
    "qdadd",
    "qdaddeq",
    "qdaddne",
    "qdaddnv",
    "qdaddmi",
    "qdaddpl",
    "qdaddvs",
    "qdaddvc",
    "qdaddhi",
    "qdaddhs",
    "qdaddls",
    "qdaddlt",
    "qdaddle",
    "qdaddlo",
    "qdaddge",
    "qdaddgt",
    "qdaddal",
    "qdaddcc",
    "qdaddcs",
    "qdsub",
    "qdsubeq",
    "qdsubne",
    "qdsubnv",
    "qdsubmi",
    "qdsubpl",
    "qdsubvs",
    "qdsubvc",
    "qdsubhi",
    "qdsubhs",
    "qdsubls",
    "qdsublt",
    "qdsuble",
    "qdsublo",
    "qdsubge",
    "qdsubgt",
    "qdsubal",
    "qdsubcc",
    "qdsubcs",
    "qsub",
    "qsubal",
    "qsubeq",
    "qsubne",
    "qsubnv",
    "qsubmi",
    "qsubpl",
    "qsubvs",
    "qsubvc",
    "qsubhi",
    "qsubhs",
    "qsubls",
    "qsublt",
    "qsuble",
    "qsublo",
    "qsubge",
    "qsubgt",
    "qsubcc",
    "qsubcs",
    "rsc",
    "rsceq",
    "rsceqs",
    "rscne",
    "rscnes",
    "rscnv",
    "rscnvs",
    "rscmi",
    "rscmis",
    "rscpl",
    "rscpls",
    "rscvs",
    "rscvss",
    "rscvc",
    "rscvcs",
    "rschi",
    "rschis",
    "rschs",
    "rschss",
    "rscls",
    "rsclss",
    "rsclt",
    "rsclts",
    "rscle",
    "rscles",
    "rsclo",
    "rsclos",
    "rscge",
    "rscges",
    "rscgt",
    "rscgts",
    "rscal",
    "rscals",
    "rsccc",
    "rscccs",
    "rsccs",
    "rsccss",
    "rscs",
    "asx",
    "qasx",
    "qasxeq",
    "qasxne",
    "qasxnv",
    "qasxmi",
    "qasxpl",
    "qasxvs",
    "qasxvc",
    "qasxhi",
    "qasxhs",
    "qasxls",
    "qasxlt",
    "qasxle",
    "qasxlo",
    "qasxge",
    "qasxgt",
    "qasxal",
    "qasxcc",
    "qasxcs",
    "sasx",
    "sasxeq",
    "sasxne",
    "sasxnv",
    "sasxmi",
    "sasxpl",
    "sasxvs",
    "sasxvc",
    "sasxhi",
    "sasxhs",
    "sasxls",
    "sasxlt",
    "sasxle",
    "sasxlo",
    "sasxge",
    "sasxgt",
    "sasxal",
    "sasxcc",
    "sasxcs",
    "shasx",
    "shasxeq",
    "shasxne",
    "shasxnv",
    "shasxmi",
    "shasxpl",
    "shasxvs",
    "shasxvc",
    "shasxhi",
    "shasxhs",
    "shasxls",
    "shasxlt",
    "shasxle",
    "shasxlo",
    "shasxge",
    "shasxgt",
    "shasxal",
    "shasxcc",
    "shasxcs",
    "uasx",
    "uasxeq",
    "uasxne",
    "uasxnv",
    "uasxmi",
    "uasxpl",
    "uasxvs",
    "uasxvc",
    "uasxhi",
    "uasxhs",
    "uasxls",
    "uasxlt",
    "uasxle",
    "uasxlo",
    "uasxge",
    "uasxgt",
    "uasxal",
    "uasxcc",
    "uasxcs",
    "uhasx",
    "uhasxeq",
    "uhasxne",
    "uhasxnv",
    "uhasxmi",
    "uhasxpl",
    "uhasxvs",
    "uhasxvc",
    "uhasxhi",
    "uhasxhs",
    "uhasxls",
    "uhasxlt",
    "uhasxle",
    "uhasxlo",
    "uhasxge",
    "uhasxgt",
    "uhasxal",
    "uhasxcc",
    "uhasxcs",
    "uqasx",
    "uqasxeq",
    "uqasxne",
    "uqasxnv",
    "uqasxmi",
    "uqasxpl",
    "uqasxvs",
    "uqasxvc",
    "uqasxhi",
    "uqasxhs",
    "uqasxls",
    "uqasxlt",
    "uqasxle",
    "uqasxlo",
    "uqasxge",
    "uqasxgt",
    "uqasxal",
    "uqasxcc",
    "uqasxcs",
    "qsaxeq",
    "qsaxne",
    "qsaxnv",
    "qsaxmi",
    "qsaxpl",
    "qsaxvs",
    "qsaxvc",
    "qsaxhi",
    "qsaxhs",
    "qsaxls",
    "qsaxlt",
    "qsaxle",
    "qsaxlo",
    "qsaxge",
    "qsaxgt",
    "qsaxal",
    "qsaxcc",
    "qsaxcs",
    "shsax",
    "shsaxeq",
    "shsaxne",
    "shsaxnv",
    "shsaxmi",
    "shsaxpl",
    "shsaxvs",
    "shsaxvc",
    "shsaxhi",
    "shsaxhs",
    "shsaxls",
    "shsaxlt",
    "shsaxle",
    "shsaxlo",
    "shsaxge",
    "shsaxgt",
    "shsaxal",
    "shsaxcc",
    "shsaxcs",
    "ssax",
    "ssaxeq",
    "ssaxne",
    "ssaxnv",
    "ssaxmi",
    "ssaxpl",
    "ssaxvs",
    "ssaxvc",
    "ssaxhi",
    "ssaxhs",
    "ssaxls",
    "ssaxlt",
    "ssaxle",
    "ssaxlo",
    "ssaxge",
    "ssaxgt",
    "ssaxal",
    "ssaxcc",
    "ssaxcs",
    "uhsax",
    "uhsaxeq",
    "uhsaxne",
    "uhsaxnv",
    "uhsaxmi",
    "uhsaxpl",
    "uhsaxvs",
    "uhsaxvc",
    "uhsaxhi",
    "uhsaxhs",
    "uhsaxls",
    "uhsaxlt",
    "uhsaxle",
    "uhsaxlo",
    "uhsaxge",
    "uhsaxgt",
    "uhsaxal",
    "uhsaxcc",
    "uhsaxcs",
    "uqsax",
    "uqsaxeq",
    "uqsaxne",
    "uqsaxnv",
    "uqsaxmi",
    "uqsaxpl",
    "uqsaxvs",
    "uqsaxvc",
    "uqsaxhi",
    "uqsaxhs",
    "uqsaxls",
    "uqsaxlt",
    "uqsaxle",
    "uqsaxlo",
    "uqsaxge",
    "uqsaxgt",
    "uqsaxal",
    "uqsaxcc",
    "uqsaxcs",
    "usax",
    "usaxeq",
    "usaxne",
    "usaxnv",
    "usaxmi",
    "usaxpl",
    "usaxvs",
    "usaxvc",
    "usaxhi",
    "usaxhs",
    "usaxls",
    "usaxlt",
    "usaxle",
    "usaxlo",
    "usaxge",
    "usaxgt",
    "usaxal",
    "usaxcc",
    "usaxcs",
    "smmul",
    "smmuleq",
    "smmulne",
    "smmulmi",
    "smmulpl",
    "smmulvs",
    "smmulvc",
    "smmulhi",
    "smmulls",
    "smmulge",
    "smmullt",
    "smmulgt",
    "smmulle",
    "smmulal",
    "smmullo",
    "smmulcc",
    "smmulhs",
    "smmulcs",
    "smmulnv",
    "smmulr",
    "smmulreq",
    "smmulrne",
    "smmulrmi",
    "smmulrpl",
    "smmulrvs",
    "smmulrvc",
    "smmulrhi",
    "smmulrls",
    "smmulrge",
    "smmulrlt",
    "smmulrgt",
    "smmulrle",
    "smmulral",
    "smmulrlo",
    "smmulrcc",
    "smmulrhs",
    "smmulrcs",
    "smmulrnv",
    "smmla",
    "smmlaeq",
    "smmlane",
    "smmlanv",
    "smmlami",
    "smmlapl",
    "smmlavs",
    "smmlavc",
    "smmlahi",
    "smmlahs",
    "smmlals",
    "smmlalt",
    "smmlale",
    "smmlalo",
    "smmlage",
    "smmlagt",
    "smmlaal",
    "smmlacc",
    "smmlacs",
    "smmlar",
    "smmlareq",
    "smmlarne",
    "smmlarnv",
    "smmlarmi",
    "smmlarpl",
    "smmlarvs",
    "smmlarvc",
    "smmlarhi",
    "smmlarhs",
    "smmlarls",
    "smmlarlt",
    "smmlarle",
    "smmlarlo",
    "smmlarge",
    "smmlargt",
    "smmlaral",
    "smmlarcc",
    "smmlarcs",
    "smmls",
    "smmlseq",
    "smmlsne",
    "smmlsnv",
    "smmlsmi",
    "smmlspl",
    "smmlsvs",
    "smmlsvc",
    "smmlshi",
    "smmlshs",
    "smmlsls",
    "smmlslt",
    "smmlsle",
    "smmlslo",
    "smmlsge",
    "smmlsgt",
    "smmlsal",
    "smmlscc",
    "smmlscs",
    "smmlsr",
    "smmlsreq",
    "smmlsrne",
    "smmlsrnv",
    "smmlsrmi",
    "smmlsrpl",
    "smmlsrvs",
    "smmlsrvc",
    "smmlsrhi",
    "smmlsrhs",
    "smmlsrls",
    "smmlsrlt",
    "smmlsrle",
    "smmlsrlo",
    "smmlsrge",
    "smmlsrgt",
    "smmlsral",
    "smmlsrcc",
    "smmlsrcs",
    "umul",
    "mul",
    "muleq",
    "muleqs",
    "mulne",
    "mulnes",
    "mulnv",
    "mulnvs",
    "mulmi",
    "mulmis",
    "mulpl",
    "mulpls",
    "mulvs",
    "mulvss",
    "mulvc",
    "mulvcs",
    "mulhi",
    "mulhis",
    "mulhs",
    "mulhss",
    "mulls",
    "mullss",
    "mullt",
    "mullts",
    "mulle",
    "mulles",
    "mullo",
    "mullos",
    "mulge",
    "mulges",
    "mulgt",
    "mulgts",
    "mulal",
    "mulals",
    "mulcc",
    "mulccs",
    "mulcs",
    "mulcss",
    "muls",
    "smla",
    "smlabbeq",
    "smlabbne",
    "smlabbnv",
    "smlabbmi",
    "smlabbpl",
    "smlabbvs",
    "smlabbvc",
    "smlabbhi",
    "smlabbhs",
    "smlabbls",
    "smlabblt",
    "smlabble",
    "smlabblo",
    "smlabbge",
    "smlabbgt",
    "smlabbal",
    "smlabbcc",
    "smlabbcs",
    "smlabt",
    "smlabteq",
    "smlabtne",
    "smlabtnv",
    "smlabtmi",
    "smlabtpl",
    "smlabtvs",
    "smlabtvc",
    "smlabthi",
    "smlabths",
    "smlabtls",
    "smlabtlt",
    "smlabtle",
    "smlabtlo",
    "smlabtge",
    "smlabtgt",
    "smlabtal",
    "smlabtcc",
    "smlabtcs",
    "smlatb",
    "smlatbeq",
    "smlatbne",
    "smlatbnv",
    "smlatbmi",
    "smlatbpl",
    "smlatbvs",
    "smlatbvc",
    "smlatbhi",
    "smlatbhs",
    "smlatbls",
    "smlatblt",
    "smlatble",
    "smlatblo",
    "smlatbge",
    "smlatbgt",
    "smlatbal",
    "smlatbcc",
    "smlatbcs",
    "smlatt",
    "smlatteq",
    "smlattne",
    "smlattnv",
    "smlattmi",
    "smlattpl",
    "smlattvs",
    "smlattvc",
    "smlatthi",
    "smlatths",
    "smlattls",
    "smlattlt",
    "smlattle",
    "smlattlo",
    "smlattge",
    "smlattgt",
    "smlattal",
    "smlattcc",
    "smlattcs",
    "ssat",
    "ssateq",
    "ssatne",
    "ssatmi",
    "ssatpl",
    "ssatvs",
    "ssatvc",
    "ssathi",
    "ssatls",
    "ssatge",
    "ssatlt",
    "ssatgt",
    "ssatle",
    "ssatal",
    "ssatlo",
    "ssatcc",
    "ssaths",
    "ssatcs",
    "ssatnv",
    "ssat16",
    "ssateq16",
    "ssatne16",
    "ssatmi16",
    "ssatpl16",
    "ssatvs16",
    "ssatvc16",
    "ssathi16",
    "ssatls16",
    "ssatge16",
    "ssatlt16",
    "ssatgt16",
    "ssatle16",
    "ssatal16",
    "ssatlo16",
    "ssatcc16",
    "ssaths16",
    "ssatcs16",
    "ssatnv16",
    "usat",
    "usateq",
    "usatne",
    "usatmi",
    "usatpl",
    "usatvs",
    "usatvc",
    "usathi",
    "usatls",
    "usatge",
    "usatlt",
    "usatgt",
    "usatle",
    "usatal",
    "usatlo",
    "usatcc",
    "usaths",
    "usatcs",
    "usatnv",
    "usat16",
    "usat16eq",
    "usat16ne",
    "usat16mi",
    "usat16pl",
    "usat16vs",
    "usat16vc",
    "usat16hi",
    "usat16ls",
    "usat16ge",
    "usat16lt",
    "usat16gt",
    "usat16le",
    "usat16al",
    "usat16lo",
    "usat16cc",
    "usat16hs",
    "usat16cs",
    "usat16nv",
    "qsax",
    "qsaxeq",
    "qsaxne",
    "qsaxmi",
    "qsaxpl",
    "qsaxvs",
    "qsaxvc",
    "qsaxhi",
    "qsaxls",
    "qsaxge",
    "qsaxlt",
    "qsaxgt",
    "qsaxle",
    "qsaxal",
    "qsaxlo",
    "qsaxcc",
    "qsaxhs",
    "qsaxcs",
    "qsaxnv",
    "shsax",
    "shsaxeq",
    "shsaxne",
    "shsaxmi",
    "shsaxpl",
    "shsaxvs",
    "shsaxvc",
    "shsaxhi",
    "shsaxls",
    "shsaxge",
    "shsaxlt",
    "shsaxgt",
    "shsaxle",
    "shsaxal",
    "shsaxlo",
    "shsaxcc",
    "shsaxhs",
    "shsaxcs",
    "shsaxnv",
    "ssax",
    "ssaxeq",
    "ssaxne",
    "ssaxmi",
    "ssaxpl",
    "ssaxvs",
    "ssaxvc",
    "ssaxhi",
    "ssaxls",
    "ssaxge",
    "ssaxlt",
    "ssaxgt",
    "ssaxle",
    "ssaxal",
    "ssaxlo",
    "ssaxcc",
    "ssaxhs",
    "ssaxcs",
    "ssaxnv",
    "uhsax",
    "uhsaxeq",
    "uhsaxne",
    "uhsaxmi",
    "uhsaxpl",
    "uhsaxvs",
    "uhsaxvc",
    "uhsaxhi",
    "uhsaxls",
    "uhsaxge",
    "uhsaxlt",
    "uhsaxgt",
    "uhsaxle",
    "uhsaxal",
    "uhsaxlo",
    "uhsaxcc",
    "uhsaxhs",
    "uhsaxcs",
    "uhsaxnv",
    "uqsax",
    "uqsaxeq",
    "uqsaxne",
    "uqsaxmi",
    "uqsaxpl",
    "uqsaxvs",
    "uqsaxvc",
    "uqsaxhi",
    "uqsaxls",
    "uqsaxge",
    "uqsaxlt",
    "uqsaxgt",
    "uqsaxle",
    "uqsaxal",
    "uqsaxlo",
    "uqsaxcc",
    "uqsaxhs",
    "uqsaxcs",
    "uqsaxnv",
    "usax",
    "usaxeq",
    "usaxne",
    "usaxmi",
    "usaxpl",
    "usaxvs",
    "usaxvc",
    "usaxhi",
    "usaxls",
    "usaxge",
    "usaxlt",
    "usaxgt",
    "usaxle",
    "usaxal",
    "usaxlo",
    "usaxcc",
    "usaxhs",
    "usaxcs",
    "usaxnv",
    "qadd16",
    "qadd16eq",
    "qadd16ne",
    "qadd16mi",
    "qadd16pl",
    "qadd16vs",
    "qadd16vc",
    "qadd16hi",
    "qadd16ls",
    "qadd16ge",
    "qadd16lt",
    "qadd16gt",
    "qadd16le",
    "qadd16al",
    "qadd16lo",
    "qadd16cc",
    "qadd16hs",
    "qadd16cs",
    "qadd16nv",
    "sadd16",
    "sadd16eq",
    "sadd16ne",
    "sadd16mi",
    "sadd16pl",
    "sadd16vs",
    "sadd16vc",
    "sadd16hi",
    "sadd16ls",
    "sadd16ge",
    "sadd16lt",
    "sadd16gt",
    "sadd16le",
    "sadd16al",
    "sadd16lo",
    "sadd16cc",
    "sadd16hs",
    "sadd16cs",
    "sadd16nv",
    "shadd16",
    "shadd16eq",
    "shadd16ne",
    "shadd16mi",
    "shadd16pl",
    "shadd16vs",
    "shadd16vc",
    "shadd16hi",
    "shadd16ls",
    "shadd16ge",
    "shadd16lt",
    "shadd16gt",
    "shadd16le",
    "shadd16al",
    "shadd16lo",
    "shadd16cc",
    "shadd16hs",
    "shadd16cs",
    "shadd16nv",
    "uadd16",
    "uadd16eq",
    "uadd16ne",
    "uadd16mi",
    "uadd16pl",
    "uadd16vs",
    "uadd16vc",
    "uadd16hi",
    "uadd16ls",
    "uadd16ge",
    "uadd16lt",
    "uadd16gt",
    "uadd16le",
    "uadd16al",
    "uadd16lo",
    "uadd16cc",
    "uadd16hs",
    "uadd16cs",
    "uadd16nv",
    "uhadd16",
    "uhadd16eq",
    "uhadd16ne",
    "uhadd16mi",
    "uhadd16pl",
    "uhadd16vs",
    "uhadd16vc",
    "uhadd16hi",
    "uhadd16ls",
    "uhadd16ge",
    "uhadd16lt",
    "uhadd16gt",
    "uhadd16le",
    "uhadd16al",
    "uhadd16lo",
    "uhadd16cc",
    "uhadd16hs",
    "uhadd16cs",
    "uhadd16nv",
    "uqadd16",
    "uqadd16eq",
    "uqadd16ne",
    "uqadd16mi",
    "uqadd16pl",
    "uqadd16vs",
    "uqadd16vc",
    "uqadd16hi",
    "uqadd16ls",
    "uqadd16ge",
    "uqadd16lt",
    "uqadd16gt",
    "uqadd16le",
    "uqadd16al",
    "uqadd16lo",
    "uqadd16cc",
    "uqadd16hs",
    "uqadd16cs",
    "uqadd16nv",
    "qsub16",
    "qsub16eq",
    "qsub16ne",
    "qsub16mi",
    "qsub16pl",
    "qsub16vs",
    "qsub16vc",
    "qsub16hi",
    "qsub16ls",
    "qsub16ge",
    "qsub16lt",
    "qsub16gt",
    "qsub16le",
    "qsub16al",
    "qsub16lo",
    "qsub16cc",
    "qsub16hs",
    "qsub16cs",
    "qsub16nv",
    "shsub16",
    "shsub16eq",
    "shsub16ne",
    "shsub16mi",
    "shsub16pl",
    "shsub16vs",
    "shsub16vc",
    "shsub16hi",
    "shsub16ls",
    "shsub16ge",
    "shsub16lt",
    "shsub16gt",
    "shsub16le",
    "shsub16al",
    "shsub16lo",
    "shsub16cc",
    "shsub16hs",
    "shsub16cs",
    "shsub16nv",
    "ssub16",
    "ssub16eq",
    "ssub16ne",
    "ssub16mi",
    "ssub16pl",
    "ssub16vs",
    "ssub16vc",
    "ssub16hi",
    "ssub16ls",
    "ssub16ge",
    "ssub16lt",
    "ssub16gt",
    "ssub16le",
    "ssub16al",
    "ssub16lo",
    "ssub16cc",
    "ssub16hs",
    "ssub16cs",
    "ssub16nv",
    "uhsub16",
    "uhsub16eq",
    "uhsub16ne",
    "uhsub16mi",
    "uhsub16pl",
    "uhsub16vs",
    "uhsub16vc",
    "uhsub16hi",
    "uhsub16ls",
    "uhsub16ge",
    "uhsub16lt",
    "uhsub16gt",
    "uhsub16le",
    "uhsub16al",
    "uhsub16lo",
    "uhsub16cc",
    "uhsub16hs",
    "uhsub16cs",
    "uhsub16nv",
    "uqsub16",
    "uqsub16eq",
    "uqsub16ne",
    "uqsub16mi",
    "uqsub16pl",
    "uqsub16vs",
    "uqsub16vc",
    "uqsub16hi",
    "uqsub16ls",
    "uqsub16ge",
    "uqsub16lt",
    "uqsub16gt",
    "uqsub16le",
    "uqsub16al",
    "uqsub16lo",
    "uqsub16cc",
    "uqsub16hs",
    "uqsub16cs",
    "uqsub16nv",
    "usub16",
    "usub16eq",
    "usub16ne",
    "usub16mi",
    "usub16pl",
    "usub16vs",
    "usub16vc",
    "usub16hi",
    "usub16ls",
    "usub16ge",
    "usub16lt",
    "usub16gt",
    "usub16le",
    "usub16al",
    "usub16lo",
    "usub16cc",
    "usub16hs",
    "usub16cs",
    "usub16nv",
    "qadd8",
    "qadd8eq",
    "qadd8ne",
    "qadd8mi",
    "qadd8pl",
    "qadd8vs",
    "qadd8vc",
    "qadd8hi",
    "qadd8ls",
    "qadd8ge",
    "qadd8lt",
    "qadd8gt",
    "qadd8le",
    "qadd8al",
    "qadd8lo",
    "qadd8cc",
    "qadd8hs",
    "qadd8cs",
    "qadd8nv",
    "sadd8",
    "sadd8eq",
    "sadd8ne",
    "sadd8mi",
    "sadd8pl",
    "sadd8vs",
    "sadd8vc",
    "sadd8hi",
    "sadd8ls",
    "sadd8ge",
    "sadd8lt",
    "sadd8gt",
    "sadd8le",
    "sadd8al",
    "sadd8lo",
    "sadd8cc",
    "sadd8hs",
    "sadd8cs",
    "sadd8nv",
    "shadd8",
    "shadd8eq",
    "shadd8ne",
    "shadd8mi",
    "shadd8pl",
    "shadd8vs",
    "shadd8vc",
    "shadd8hi",
    "shadd8ls",
    "shadd8ge",
    "shadd8lt",
    "shadd8gt",
    "shadd8le",
    "shadd8al",
    "shadd8lo",
    "shadd8cc",
    "shadd8hs",
    "shadd8cs",
    "shadd8nv",
    "uadd8",
    "uadd8eq",
    "uadd8ne",
    "uadd8mi",
    "uadd8pl",
    "uadd8vs",
    "uadd8vc",
    "uadd8hi",
    "uadd8ls",
    "uadd8ge",
    "uadd8lt",
    "uadd8gt",
    "uadd8le",
    "uadd8al",
    "uadd8lo",
    "uadd8cc",
    "uadd8hs",
    "uadd8cs",
    "uadd8nv",
    "uhadd8",
    "uhadd8eq",
    "uhadd8ne",
    "uhadd8mi",
    "uhadd8pl",
    "uhadd8vs",
    "uhadd8vc",
    "uhadd8hi",
    "uhadd8ls",
    "uhadd8ge",
    "uhadd8lt",
    "uhadd8gt",
    "uhadd8le",
    "uhadd8al",
    "uhadd8lo",
    "uhadd8cc",
    "uhadd8hs",
    "uhadd8cs",
    "uhadd8nv",
    "uqadd8",
    "uqadd8eq",
    "uqadd8ne",
    "uqadd8mi",
    "uqadd8pl",
    "uqadd8vs",
    "uqadd8vc",
    "uqadd8hi",
    "uqadd8ls",
    "uqadd8ge",
    "uqadd8lt",
    "uqadd8gt",
    "uqadd8le",
    "uqadd8al",
    "uqadd8lo",
    "uqadd8cc",
    "uqadd8hs",
    "uqadd8cs",
    "uqadd8nv",
    "qsub8",
    "qsub8eq",
    "qsub8ne",
    "qsub8mi",
    "qsub8pl",
    "qsub8vs",
    "qsub8vc",
    "qsub8hi",
    "qsub8ls",
    "qsub8ge",
    "qsub8lt",
    "qsub8gt",
    "qsub8le",
    "qsub8al",
    "qsub8lo",
    "qsub8cc",
    "qsub8hs",
    "qsub8cs",
    "qsub8nv",
    "shsub8",
    "shsub8eq",
    "shsub8ne",
    "shsub8mi",
    "shsub8pl",
    "shsub8vs",
    "shsub8vc",
    "shsub8hi",
    "shsub8ls",
    "shsub8ge",
    "shsub8lt",
    "shsub8gt",
    "shsub8le",
    "shsub8al",
    "shsub8lo",
    "shsub8cc",
    "shsub8hs",
    "shsub8cs",
    "shsub8nv",
    "ssub8",
    "ssub8eq",
    "ssub8ne",
    "ssub8mi",
    "ssub8pl",
    "ssub8vs",
    "ssub8vc",
    "ssub8hi",
    "ssub8ls",
    "ssub8ge",
    "ssub8lt",
    "ssub8gt",
    "ssub8le",
    "ssub8al",
    "ssub8lo",
    "ssub8cc",
    "ssub8hs",
    "ssub8cs",
    "ssub8nv",
    "uhsub8",
    "uhsub8eq",
    "uhsub8ne",
    "uhsub8mi",
    "uhsub8pl",
    "uhsub8vs",
    "uhsub8vc",
    "uhsub8hi",
    "uhsub8ls",
    "uhsub8ge",
    "uhsub8lt",
    "uhsub8gt",
    "uhsub8le",
    "uhsub8al",
    "uhsub8lo",
    "uhsub8cc",
    "uhsub8hs",
    "uhsub8cs",
    "uhsub8nv",
    "uqsub8",
    "uqsub8eq",
    "uqsub8ne",
    "uqsub8mi",
    "uqsub8pl",
    "uqsub8vs",
    "uqsub8vc",
    "uqsub8hi",
    "uqsub8ls",
    "uqsub8ge",
    "uqsub8lt",
    "uqsub8gt",
    "uqsub8le",
    "uqsub8al",
    "uqsub8lo",
    "uqsub8cc",
    "uqsub8hs",
    "uqsub8cs",
    "uqsub8nv",
    "usub8",
    "usub8eq",
    "usub8ne",
    "usub8mi",
    "usub8pl",
    "usub8vs",
    "usub8vc",
    "usub8hi",
    "usub8ls",
    "usub8ge",
    "usub8lt",
    "usub8gt",
    "usub8le",
    "usub8al",
    "usub8lo",
    "usub8cc",
    "usub8hs",
    "usub8cs",
    "usub8nv",
    "sdiv",
    "sdiveq",
    "sdivne",
    "sdivmi",
    "sdivpl",
    "sdivvs",
    "sdivvc",
    "sdivhi",
    "sdivls",
    "sdivge",
    "sdivlt",
    "sdivgt",
    "sdivle",
    "sdival",
    "sdivlo",
    "sdivcc",
    "sdivhs",
    "sdivcs",
    "sdivnv",
    "udiv",
    "udiveq",
    "udivne",
    "udivmi",
    "udivpl",
    "udivvs",
    "udivvc",
    "udivhi",
    "udivls",
    "udivge",
    "udivlt",
    "udivgt",
    "udivle",
    "udival",
    "udivlo",
    "udivcc",
    "udivhs",
    "udivcs",
    "udivnv",
    "umlal",
    "umlaleq",
    "umlalne",
    "umlalmi",
    "umlalpl",
    "umlalvs",
    "umlalvc",
    "umlalhi",
    "umlalls",
    "umlalge",
    "umlallt",
    "umlalgt",
    "umlalle",
    "umlalal",
    "umlallo",
    "umlalcc",
    "umlalhs",
    "umlalcs",
    "umlalnv",
    "umlals",
    "umlaleqs",
    "umlalnes",
    "umlalmis",
    "umlalpls",
    "umlalvss",
    "umlalvcs",
    "umlalhis",
    "umlallss",
    "umlalges",
    "umlallts",
    "umlalgts",
    "umlalles",
    "umlalals",
    "umlallos",
    "umlalccs",
    "umlalhss",
    "umlalcss",
    "umlalnvs",
    "umlals",
    "umlalseq",
    "umlalsne",
    "umlalsmi",
    "umlalspl",
    "umlalsvs",
    "umlalsvc",
    "umlalshi",
    "umlalsls",
    "umlalsge",
    "umlalslt",
    "umlalsgt",
    "umlalsle",
    "umlalsal",
    "umlalslo",
    "umlalscc",
    "umlalshs",
    "umlalscs",
    "umlalsnv",
    "umaal",
    "umaaleq",
    "umaalne",
    "umaalmi",
    "umaalpl",
    "umaalvs",
    "umaalvc",
    "umaalhi",
    "umaalls",
    "umaalge",
    "umaallt",
    "umaalgt",
    "umaalle",
    "umaalal",
    "umaallo",
    "umaalcc",
    "umaalhs",
    "umaalcs",
    "umaalnv",
    "smull",
    "smulleq",
    "smullne",
    "smullmi",
    "smullpl",
    "smullvs",
    "smullvc",
    "smullhi",
    "smullls",
    "smullge",
    "smulllt",
    "smullgt",
    "smullle",
    "smullal",
    "smulllo",
    "smullcc",
    "smullhs",
    "smullcs",
    "smullnv",
    "smulls",
    "smulleqs",
    "smullnes",
    "smullmis",
    "smullpls",
    "smullvss",
    "smullvcs",
    "smullhis",
    "smulllss",
    "smullges",
    "smulllts",
    "smullgts",
    "smullles",
    "smullals",
    "smulllos",
    "smullccs",
    "smullhss",
    "smullcss",
    "smullnvs",
    "smullseq",
    "smullsne",
    "smullsmi",
    "smullspl",
    "smullsvs",
    "smullsvc",
    "smullshi",
    "smullsls",
    "smullsge",
    "smullslt",
    "smullsgt",
    "smullsle",
    "smullsal",
    "smullslo",
    "smullscc",
    "smullshs",
    "smullscs",
    "smullsnv",
    "smlad",
    "smladeq",
    "smladne",
    "smladmi",
    "smladpl",
    "smladvs",
    "smladvc",
    "smladhi",
    "smladls",
    "smladge",
    "smladlt",
    "smladgt",
    "smladle",
    "smladal",
    "smladlo",
    "smladcc",
    "smladhs",
    "smladcs",
    "smladnv",
    "smladx",
    "smladxeq",
    "smladxne",
    "smladxmi",
    "smladxpl",
    "smladxvs",
    "smladxvc",
    "smladxhi",
    "smladxls",
    "smladxge",
    "smladxlt",
    "smladxgt",
    "smladxle",
    "smladxal",
    "smladxlo",
    "smladxcc",
    "smladxhs",
    "smladxcs",
    "smladxnv",
    "smlald",
    "smlaldeq",
    "smlaldne",
    "smlaldmi",
    "smlaldpl",
    "smlaldvs",
    "smlaldvc",
    "smlaldhi",
    "smlaldls",
    "smlaldge",
    "smlaldlt",
    "smlaldgt",
    "smlaldle",
    "smlaldal",
    "smlaldlo",
    "smlaldcc",
    "smlaldhs",
    "smlaldcs",
    "smlaldnv",
    "smusd",
    "smusdeq",
    "smusdne",
    "smusdmi",
    "smusdpl",
    "smusdvs",
    "smusdvc",
    "smusdhi",
    "smusdls",
    "smusdge",
    "smusdlt",
    "smusdgt",
    "smusdle",
    "smusdal",
    "smusdlo",
    "smusdcc",
    "smusdhs",
    "smusdcs",
    "smusdnv",
    "smusdx",
    "smusdxeq",
    "smusdxne",
    "smusdxmi",
    "smusdxpl",
    "smusdxvs",
    "smusdxvc",
    "smusdxhi",
    "smusdxls",
    "smusdxge",
    "smusdxlt",
    "smusdxgt",
    "smusdxle",
    "smusdxal",
    "smusdxlo",
    "smusdxcc",
    "smusdxhs",
    "smusdxcs",
    "smusdxnv",
    "smlsd",
    "smlsdeq",
    "smlsdne",
    "smlsdmi",
    "smlsdpl",
    "smlsdvs",
    "smlsdvc",
    "smlsdhi",
    "smlsdls",
    "smlsdge",
    "smlsdlt",
    "smlsdgt",
    "smlsdle",
    "smlsdal",
    "smlsdlo",
    "smlsdcc",
    "smlsdhs",
    "smlsdcs",
    "smlsdnv",
    "smlsdx",
    "smlsdxeq",
    "smlsdxne",
    "smlsdxmi",
    "smlsdxpl",
    "smlsdxvs",
    "smlsdxvc",
    "smlsdxhi",
    "smlsdxls",
    "smlsdxge",
    "smlsdxlt",
    "smlsdxgt",
    "smlsdxle",
    "smlsdxal",
    "smlsdxlo",
    "smlsdxcc",
    "smlsdxhs",
    "smlsdxcs",
    "smlsdxnv",
    "smlsld",
    "smlsldeq",
    "smlsldne",
    "smlsldmi",
    "smlsldpl",
    "smlsldvs",
    "smlsldvc",
    "smlsldhi",
    "smlsldls",
    "smlsldge",
    "smlsldlt",
    "smlsldgt",
    "smlsldle",
    "smlsldal",
    "smlsldlo",
    "smlsldcc",
    "smlsldhs",
    "smlsldcs",
    "smlsldnv",
    "smlsldx",
    "smlsldxeq",
    "smlsldxne",
    "smlsldxmi",
    "smlsldxpl",
    "smlsldxvs",
    "smlsldxvc",
    "smlsldxhi",
    "smlsldxls",
    "smlsldxge",
    "smlsldxlt",
    "smlsldxgt",
    "smlsldxle",
    "smlsldxal",
    "smlsldxlo",
    "smlsldxcc",
    "smlsldxhs",
    "smlsldxcs",
    "smlsldxnv",
    "mla",
    "mlaeq",
    "mlane",
    "mlami",
    "mlapl",
    "mlavs",
    "mlavc",
    "mlahi",
    "mlals",
    "mlage",
    "mlalt",
    "mlagt",
    "mlale",
    "mlaal",
    "mlalo",
    "mlacc",
    "mlahs",
    "mlacs",
    "mlanv",
    "mlas",
    "mlaeqs",
    "mlanes",
    "mlamis",
    "mlapls",
    "mlavss",
    "mlavcs",
    "mlahis",
    "mlalss",
    "mlages",
    "mlalts",
    "mlagts",
    "mlales",
    "mlaals",
    "mlalos",
    "mlaccs",
    "mlahss",
    "mlacss",
    "mlanvs",
    "mlaseq",
    "mlasne",
    "mlasmi",
    "mlaspl",
    "mlasvs",
    "mlasvc",
    "mlashi",
    "mlasls",
    "mlasge",
    "mlaslt",
    "mlasgt",
    "mlasle",
    "mlasal",
    "mlaslo",
    "mlascc",
    "mlashs",
    "mlascs",
    "mlasnv",
    "mls",
    "mlseq",
    "mlsne",
    "mlsmi",
    "mlspl",
    "mlsvs",
    "mlsvc",
    "mlshi",
    "mlsls",
    "mlsge",
    "mlslt",
    "mlsgt",
    "mlsle",
    "mlsal",
    "mlslo",
    "mlscc",
    "mlshs",
    "mlscs",
    "mlsnv",
    "smuad",
    "smuadeq",
    "smuadne",
    "smuadmi",
    "smuadpl",
    "smuadvs",
    "smuadvc",
    "smuadhi",
    "smuadls",
    "smuadge",
    "smuadlt",
    "smuadgt",
    "smuadle",
    "smuadal",
    "smuadlo",
    "smuadcc",
    "smuadhs",
    "smuadcs",
    "smuadnv",
    "smuadx",
    "smuadxeq",
    "smuadxne",
    "smuadxmi",
    "smuadxpl",
    "smuadxvs",
    "smuadxvc",
    "smuadxhi",
    "smuadxls",
    "smuadxge",
    "smuadxlt",
    "smuadxgt",
    "smuadxle",
    "smuadxal",
    "smuadxlo",
    "smuadxcc",
    "smuadxhs",
    "smuadxcs",
    "smuadxnv",
    "smlal",
    "smlaleq",
    "smlalne",
    "smlalmi",
    "smlalpl",
    "smlalvs",
    "smlalvc",
    "smlalhi",
    "smlalls",
    "smlalge",
    "smlallt",
    "smlalgt",
    "smlalle",
    "smlalal",
    "smlallo",
    "smlalcc",
    "smlalhs",
    "smlalcs",
    "smlalnv",
    "smlals",
    "smlaleqs",
    "smlalnes",
    "smlalmis",
    "smlalpls",
    "smlalvss",
    "smlalvcs",
    "smlalhis",
    "smlallss",
    "smlalges",
    "smlallts",
    "smlalgts",
    "smlalles",
    "smlalals",
    "smlallos",
    "smlalccs",
    "smlalhss",
    "smlalcss",
    "smlalnvs",
    "smlalseq",
    "smlalsne",
    "smlalsmi",
    "smlalspl",
    "smlalsvs",
    "smlalsvc",
    "smlalshi",
    "smlalsls",
    "smlalsge",
    "smlalslt",
    "smlalsgt",
    "smlalsle",
    "smlalsal",
    "smlalslo",
    "smlalscc",
    "smlalshs",
    "smlalscs",
    "smlalsnv",
    "smlalbb",
    "smlalbbeq",
    "smlalbbne",
    "smlalbbmi",
    "smlalbbpl",
    "smlalbbvs",
    "smlalbbvc",
    "smlalbbhi",
    "smlalbbls",
    "smlalbbge",
    "smlalbblt",
    "smlalbbgt",
    "smlalbble",
    "smlalbbal",
    "smlalbblo",
    "smlalbbcc",
    "smlalbbhs",
    "smlalbbcs",
    "smlalbbnv",
    "smlalbt",
    "smlalbteq",
    "smlalbtne",
    "smlalbtmi",
    "smlalbtpl",
    "smlalbtvs",
    "smlalbtvc",
    "smlalbthi",
    "smlalbtls",
    "smlalbtge",
    "smlalbtlt",
    "smlalbtgt",
    "smlalbtle",
    "smlalbtal",
    "smlalbtlo",
    "smlalbtcc",
    "smlalbths",
    "smlalbtcs",
    "smlalbtnv",
    "smlaltb",
    "smlaltbeq",
    "smlaltbne",
    "smlaltbmi",
    "smlaltbpl",
    "smlaltbvs",
    "smlaltbvc",
    "smlaltbhi",
    "smlaltbls",
    "smlaltbge",
    "smlaltblt",
    "smlaltbgt",
    "smlaltble",
    "smlaltbal",
    "smlaltblo",
    "smlaltt",
    "smlaltteq",
    "smlalttne",
    "smlalttmi",
    "smlalttpl",
    "smlalttvs",
    "smlalttvc",
    "smlaltthi",
    "smlalttls",
    "smlalttge",
    "smlalttlt",
    "smlalttgt",
    "smlalttle",
    "smlalttal",
    "smlalttlo",
    "smlalttcc",
    "smlaltths",
    "smlalttcs",
    "smlalttnv",
    "smlald",
    "smlaldeq",
    "smlaldne",
    "smlaldmi",
    "smlaldpl",
    "smlaldvs",
    "smlaldvc",
    "smlaldhi",
    "smlaldls",
    "smlaldge",
    "smlaldlt",
    "smlaldgt",
    "smlaldle",
    "smlaldal",
    "smlaldlo",
    "smlaldcc",
    "smlaldhs",
    "smlaldcs",
    "smlaldnv",
    "umull",
    "umulleq",
    "umullne",
    "umullmi",
    "umullpl",
    "umullvs",
    "umullvc",
    "umullhi",
    "umullls",
    "umullge",
    "umulllt",
    "umullgt",
    "umullle",
    "umullal",
    "umulllo",
    "umullcc",
    "umullhs",
    "umullcs",
    "umullnv",
    "umulls",
    "umulleqs",
    "umullnes",
    "umullmis",
    "umullpls",
    "umullvss",
    "umullvcs",
    "umullhis",
    "umulllss",
    "umullges",
    "umulllts",
    "umullgts",
    "umullles",
    "umullals",
    "umulllos",
    "umullccs",
    "umullhss",
    "umullcss",
    "umullnvs",
    "umulls",
    "umullseq",
    "umullsne",
    "umullsmi",
    "umullspl",
    "umullsvs",
    "umullsvc",
    "umullshi",
    "umullsls",
    "umullsge",
    "umullslt",
    "umullsgt",
    "umullsle",
    "umullsal",
    "umullslo",
    "umullscc",
    "umullshs",
    "umullscs",
    "umullsnv",
    "usad8",
    "usad8eq",
    "usad8ne",
    "usad8mi",
    "usad8pl",
    "usad8vs",
    "usad8vc",
    "usad8hi",
    "usad8ls",
    "usad8ge",
    "usad8lt",
    "usad8gt",
    "usad8le",
    "usad8al",
    "usad8lo",
    "usad8cc",
    "usad8hs",
    "usad8cs",
    "usad8nv",
    "usada8",
    "usada8eq",
    "usada8ne",
    "usada8mi",
    "usada8pl",
    "usada8vs",
    "usada8vc",
    "usada8hi",
    "usada8ls",
    "usada8ge",
    "usada8lt",
    "usada8gt",
    "usada8le",
    "usada8al",
    "usada8lo",
    "usada8cc",
    "usada8hs",
    "usada8cs",
    "usada8nv",
];

pub const ARM_LOGIC: [&str; 136] = [
    "and", "andeq", "ands", "andne", "andhi", "andhs", "andlt", "andgt", "andge", "lsl", "lsllo",
    "lsleq", "lslne", "lslgt", "lslle", "lsr", "lsrhs", "lsrs", "lsrne", "lsrgt", "lsreq",
    "lsrsne", "lsrle", "orr", "orrs", "orrne", "orrhs", "orrgt", "orreq", "orrls", "orrlt",
    "orrlo", "orrhi", "orrge", "bic", "bics", "bicne", "bicge", "asr", "asreq", "asrne", "asrnv",
    "asrmi", "asrpl", "asrvs", "asrvc", "asrhi", "asrhs", "asrls", "asrlt", "asrle", "asrlo",
    "asrge", "asrgt", "asral", "asrcc", "asrcs", "ror", "roreq", "roreqs", "rorne", "rornes",
    "rornv", "rornvs", "rormi", "rormis", "rorpl", "rorpls", "rorvs", "rorvss", "rorvc", "rorvcs",
    "rorhi", "rorhits", "rorhs", "rorhss", "rorls", "rorlss", "rorlt", "rorlts", "rorle", "rorles",
    "rorlo", "rorlos", "rorge", "rorges", "rorgt", "rorgts", "roral", "rorals", "rorcc", "rorccs",
    "rorcs", "rorcss", "rors", "rrx", "rrxeq", "rrxne", "rrxmi", "rrxpl", "rrxvs", "rrxvc",
    "rrxhi", "rrxls", "rrxge", "rrxlt", "rrxgt", "rrxle", "rrxal", "rrxlo", "rrxcc", "rrxhs",
    "rrxcs", "rrxnv", "rrxs", "rrxeqs", "rrxnes", "rrxmis", "rrxpls", "rrxvss", "rrxvcs", "rrxhis",
    "rrxlss", "rrxges", "rrxlts", "rrxgts", "rrxles", "rrxals", "rrxlos", "rrxccs", "rrxhss",
    "rrxcss", "rrxnvs", "neg", "vneg", "vqneg",
];

pub const ARM_STACK: [&str; 7] = ["pop", "popeq", "popne", "pople", "pophs", "poplt", "push"];

pub const ARM_UNCOND: [&str; 3] = ["b", "bx", "bal"];

pub const ARM_COND: [&str; 87] = [
    "beq", "bne", "bmi", "bpl", "bvs", "bvc", "bhi", "bls", "bge", "blt", "bgt", "ble", "bal",
    "blo", "bcc", "bhs", "bcs", "bleq", "blne", "blmi", "blpl", "blvs", "blvc", "blhi", "blls",
    "blge", "bllt", "blgt", "blle", "blal", "bllo", "blcc", "blhs", "blcs", "blnv", "blxeq",
    "blxne", "blxmi", "blxpl", "blxvs", "blxvc", "blxhi", "blxls", "blxge", "blxlt", "blxgt",
    "blxle", "blxal", "blxlo", "blxcc", "blxhs", "blxcs", "blxnv", "bx", "bxeq", "bxne", "bxmi",
    "bxpl", "bxvs", "bxvc", "bxhi", "bxls", "bxge", "bxlt", "bxgt", "bxle", "bxal", "bxlo", "bxcc",
    "bxhs", "bxcs", "bxnv", "it", "itt", "ite", "ittt", "itet", "itte", "itee", "itttt", "itett",
    "ittet", "iteet", "ittte", "itete", "ittee", "iteee",
];

pub const ARM_TRANSFER: [&str; 16] = [
    "mov", "mvn", "movt", "mra", "mar", "ldr", "str", "pld", "pli", "pldw", "ldm", "ldrex",
    "ldrexd", "stm", "strex", "strexd",
];

pub const ARM_CALL: [&str; 2] = ["bl", "blx"];

pub const ARM_COMPARE: [&str; 4] = ["cmp", "cmn", "teq", "tst"];

// MIPS

pub const MIPS_ARITHMETIC: [&str; 107] = [
    "add",
    "add.",
    "add.d",
    "addi",
    "addiu",
    "addiupc",
    "addiur1sp",
    "addiur2",
    "addius5",
    "addiusp",
    "add.ps",
    "add.s",
    "addu",
    "addu16",
    "addu",
    "dadd",
    "daddi",
    "daddiu",
    "daddu",
    "madd",
    "madd.d",
    "maddf.d",
    "maddf.s",
    "madd.ps",
    "madd.s",
    "maddu",
    "nmadd.",
    "nmadd.d",
    "nmadd.ps",
    "nmadd.s",
    "dsub",
    "dsubu",
    "dsubu",
    "msub",
    "msub.",
    "msub.d",
    "msubf.d",
    "msubf.s",
    "msub.ps",
    "msub.s",
    "msubu",
    "nmsub.",
    "nmsub.d",
    "nmsub.ps",
    "nmsub.s",
    "sub",
    "sub.",
    "sub.d",
    "sub.ps",
    "sub.s",
    "subu",
    "subu16",
    "subu",
    "subu",
    "dmul",
    "dmult",
    "dmulu",
    "dmuh",
    "muh",
    "mul",
    "mul.",
    "mul",
    "mul.d",
    "mul.ps",
    "mul.s",
    "mult",
    "multu",
    "mulu",
    "muhu",
    "dmuhu",
    "ddiv",
    "ddivu",
    "div.",
    "div",
    "div.d",
    "div.s",
    "divu",
    "dmodu",
    "dmod",
    "modu",
    "mod",
    "max.d",
    "maxa.d",
    "maxa.s",
    "max.s",
    "min.s",
    "mina.d",
    "mina.s",
    "min.d",
    "floor.w.d",
    "floor.w.",
    "floor.l.s",
    "floor.",
    "floor.w.s",
    "floor.l.",
    "floor.l.d",
    "seh",
    "seb",
    "round.",
    "round.l.s",
    "round.w.",
    "round.w.d",
    "round.l.d",
    "round.w.s",
    "round.l.",
    "clz",
    "dclz",
];

pub const MIPS_LOGIC: [&str; 38] = [
    "xori", "xor", "xor16", "and", "andi16", "and16", "andi", "or", "ori", "nor", "or16", "sllv",
    "sll16", "dsllv", "sll", "dsll", "dsll32", "dsrl32", "dsrl", "srl", "dsrlv", "srl16", "srlv",
    "dsra", "dsra32", "srav", "sra", "dsrav", "drotrv", "drotr32", "rotrv", "drotr", "rotr",
    "negu", "neg.d", "neg.", "neg.ps", "neg.s",
];

//pub const MIPS_STACK - No stack operations in MIPS

pub const MIPS_UNCOND: [&str; 11] = [
    "b", "bal", "balc", "bc", "bc16", "jrc", "jrc16", "j", "jr", "jr.hb", "syscall",
];

pub const MIPS_COND: [&str; 46] = [
    "bcztl", "bczt", "beql", "beq", "beqzc16", "beqz", "beqzalc", "bgezal", "bgezalc", "bgez",
    "bgezall", "bgezl", "bgtzalc", "bgtz", "bgtzl", "blezl", "blezalc", "blez", "bltz", "bltzall",
    "bltzalc", "bltzal", "bltzl", "bnez", "bnezc16", "bnezalc", "bne", "bnel", "teqi", "teq",
    "bc1tl", "bc1t", "bc1nezc", "bc1f", "bc1nez", "bc1eqz", "bc1fl", "bc1eqzc", "bc2tl", "bc2t",
    "bc2eqz", "bc2nezc", "bc2f", "bc2nez", "bc2eqzc", "bc2fl",
];

pub const MIPS_TRANSFER: [&str; 63] = [
    "lb", "lbe", "lbu", "lbue", "ld", "lde", "ldu", "ldue", "ldc1", "ldc2", "ldl", "ldpc", "ldr",
    "ldxc1", "lh", "lhe", "lhu", "lhue", "ll", "lld", "lle", "lldp", "llwp", "llwpe", "lsa",
    "luxc1", "lw", "lwc1", "lwc2", "lwl", "lwle", "lwpc", "lwr", "lwre", "lwu", "mov", "sb", "sbe",
    "sc", "scd", "scdp", "sce", "scwp", "scwpe", "sd", "sdbbp", "sdc1", "sdc2", "sdl", "sdr",
    "sdxc1", "sh", "shu", "she", "sw", "swe", "swc1", "swc2", "swl", "swr", "swle", "swre",
    "swxc1",
];

pub const MIPS_CALL: [&str; 8] = [
    "jal", "jalrc16", "jalrc.hb", "jalrc", "jalr", "jalr.hb", "jalx", "jal",
];

pub const MIPS_COMPARE: [&str; 4] = ["slt", "sltu", "slti", "sltiu"];

// TikNib Instruction Categories
// Shamlessly taken from https://github.com/SoftSec-KAIST/TikNib/blob/bb8d3f33808d4cbe8128d52e252525ebd6f05c3e/tiknib/feature/asm_const.py
// I think all of these have been derived from Capstone some how - Something to look at another day
pub const X86_GRP_DTRANSFER: [&str; 147] = [
    // general purpose instructions
    "cmov",
    "cmova",
    "cmovae",
    "cmovb",
    "cmovbe",
    "cmovc",
    "cmove",
    "cmovg",
    "cmovge",
    "cmovl",
    "cmovle",
    "cmovna",
    "cmovnae",
    "cmovnb",
    "cmovnbe",
    "cmovnc",
    "cmovne",
    "cmovng",
    "cmovnge",
    "cmovnl",
    "cmovnle",
    "cmovno",
    "cmovnp",
    "cmovns",
    "cmovnz",
    "cmovo",
    "cmovp",
    "cmovpe",
    "cmovpo",
    "cmovs",
    "cmovz",
    "bswap",
    "xchg",
    "xadd",
    "cmpxchg",
    "cmpxchg8b",
    "pop",
    "popa",
    "popad",
    "push",
    "pusha",
    "pushad",
    "cdq",
    "cdqe",
    "cbw",
    "cwd",
    "cwde",
    "mov",
    "movd",
    "movq",
    "movabs",
    "movsx",
    "movsxd",
    "movzx",
    "movzxd",
    // string
    "movs",
    "movsb",
    "movsd",
    "movsw",
    "stos",
    "stosb",
    "stosd",
    "stosw",
    "lods",
    "lodsb",
    "lodsd",
    "lodsw",
    // segment register
    "lds",
    "les",
    "lfs",
    "lgs",
    "lss",
    // user mode extended
    "xsave",
    "xsavec",
    "xsaveopt",
    "xrstor",
    "xgetbv",
    "xsetbv",
    // bmi1, bmi2
    "bextr",
    "blsi",
    "pdep",
    "pext",
    // mmx
    "packssdw",
    "packsswb",
    "packusdw",
    "packuswb",
    "punpckhbw",
    "punpckhdq",
    "punpckhwd",
    "punpcklbw",
    "punpckldq",
    "punpcklwd",
    "emms",
    // sse 64-bit integer
    "pmovmskb",
    "pshufw",
    // sse2 128-bit integer
    "movdqa",
    "movdqu",
    "movq2dq",
    "movdq2q",
    "pshuflw",
    "pshufhw",
    "pshufd",
    "punpcklqdq",
    "punpckhqdq",
    // ssse2
    "pshufb",
    "palignr",
    // sse4
    "movntdqa",
    "pblendvb",
    "pblendw",
    "pinsrb",
    "pinsrd",
    "pinsrq",
    "pextrb",
    "pextrw",
    "pextrd",
    "pextrq",
    "pmovsxbw",
    "pmovzxbw",
    "pmovsxbd",
    "pmovzxbd",
    "pmovsxwd",
    "pmovzxwd",
    "pmovsxbq",
    "pmovzxbq",
    "pmovsxwq",
    "pmovzxwq",
    "pmovsxdq",
    "pmovzxdq",
    "packusdw",
    "lgdt",
    "sgdt",
    "lldt",
    "sldt",
    "ltr",
    "str",
    "lidt",
    "sidt",
    "mov",
    "lmsw",
    "smsw",
    "clts",
    "lsl",
    "lar",
    "verr",
    "verw",
    // 64-bit
    "cdqe",
    "cqo",
];

pub const X86_GRP_FLOAT_DTRANSFER: [&str; 126] = [
    // floating point instrutions
    "fld",
    "fst",
    "fstp",
    "fild",
    "fist",
    "fistp",
    "fbld",
    "fbstp",
    "fxch",
    "fcmovb",
    "fcmovbe",
    "fcmove",
    "fcmovnb",
    "fcmovnbe",
    "fcmovne",
    "fcmovnu",
    "fcmovu",
    // floating point load const instructions
    "fld1",
    "fldz",
    "fldpi",
    "fldl2e",
    "fldln2",
    "fldl2t",
    "fldlg2",
    // fpu register related
    "fclex",
    "ffree",
    "finit",
    "fldcw",
    "fldenv",
    "fnclex",
    "fninit",
    "fnop",
    "fnsave",
    "fnstcw",
    "fnstenv",
    "fnstsw",
    "frstor",
    "fsave",
    "fstcw",
    "fstenv",
    "fstsw",
    // sse
    "movaps",
    "movups",
    "movhps",
    "movhlps",
    "movlps",
    "movlhps",
    "movmskps",
    "movss",
    // sse2
    "movapd",
    "movupd",
    "movhpd",
    "movhlpd",
    "movlpd",
    "movlhpd",
    "movmskpd",
    "movsd",
    // sse shuffle
    "shufps",
    "unpckhps",
    "unpcklps",
    // sse2 shuffle
    "shufpd",
    "unpckhpd",
    "unpcklpd",
    // sse conversion
    "cvtpi2ps",
    "cvtsi2ss",
    "cvtps2pi",
    "cvttps2pi",
    "cvtss2si",
    "cvttss2si",
    // sse2 conversion
    "cvtpd2pi",
    "cvttpd2pi",
    "cvtpi2pd",
    "cvtpd2dq",
    "cvttpd2dq",
    "cvtdq2pd",
    "cvtps2pd",
    "cvtpd2ps",
    "cvtss2sd",
    "cvtsd2ss",
    "cvtsd2si",
    "cvttsd2si",
    "cvtsi2sd",
    "cvtdq2ps",
    "cvtps2dq",
    "cvttps2dq",
    // sse mxcsr state
    "ldmxcsr",
    "stmxcsr",
    // sse 64-bit
    "pextrw",
    "pinsrw",
    // sse cache
    "maskmovq",
    "movntq",
    "movntps",
    "prefetch",
    "sfence",
    // sse3
    "fisttp",
    "lddqu",
    "movshdup",
    "movsldup",
    "movddup",
    // sse4
    "blendpd",
    "blendps",
    "blendvpd",
    "blendvps",
    "extractps",
    "insertps",
    // 16-bit fp
    "vcvtps2ph",
    "vcvtps2ph",
    // vector
    "valign",
    "vblend",
    "vcompress",
    "vextract",
    "vinsert",
    "vmov",
    "vfixup",
    "vget",
    "vexpand",
    "vcvt",
    "vpblend",
    "vpbroad",
    "vpcompress",
    "vperm",
    "vpexpand",
    "vpmov",
    "vpscatter",
    "vscatter",
    "vshuf",
];

// Miscellaneous Instructions:
pub const X86_GRP_MISC: [&str; 19] = [
    "nop",
    "ud",
    "ud2",
    "lea",
    "xlat",
    "xlatb",
    "cpuid",
    "movbe",
    "prefetchw",
    "prefetchwt1",
    "clflush",
    "clflushopt",
    // sse2 cache
    "clflush",
    "lfence",
    "mfence",
    "maskmovdqu",
    "movntpd",
    "movntdq",
    "movnti",
];

pub const X86_GRP_ARITH: [&str; 106] = [
    // general purpose binary arithmetic instructions
    "adcx",
    "adox",
    "adc",
    "add",
    "xadd",
    "sub",
    "sbb",
    "imul",
    "mul",
    "idiv",
    "div",
    "inc",
    "dec",
    "neg",
    "cmp",
    // decimal arithmetic instructions
    "daa",
    "das",
    "aaa",
    "aas",
    "aam",
    "aad",
    // flag
    "stc",
    "clc",
    "cmc",
    "cld",
    "std",
    // bmi1, bmi2
    "mulx",
    // mmx
    "padd",
    "paddb",
    "paddw",
    "paddd",
    "paddsb",
    "paddsw",
    "paddusb",
    "paddusw",
    "psub",
    "psubb",
    "psubw",
    "psubd",
    "psubsb",
    "psubsw",
    "psubusb",
    "psubusw",
    "pmulhw",
    "pmullw",
    "pmaddwd",
    // sse 64bit integer
    "pavgb",
    "pavgw",
    "pmaxub",
    "pmaxsb",
    "pminub",
    "pminsb",
    "pmulhuw",
    "psadbw",
    // sse 128-bit integer
    "pmuludq",
    "paddq",
    "psubq",
    // ssse3
    "phaddw",
    "phaddsw",
    "phaddd",
    "phsubw",
    "phsubsw",
    "phsubd",
    "pabsb",
    "pabsw",
    "pabsd",
    "pabsq",
    "pmaddubsw",
    "pmulhrsw",
    "psignb",
    "psignw",
    "psignd",
    // sse4
    "pmulld",
    "pmuldq",
    "pminuw",
    "pminud",
    "pminsb",
    "pminsd",
    "pmaxuw",
    "pmaxud",
    "pmaxsb",
    "pmaxsd",
    "roundps",
    "roundpd",
    "roundss",
    "roundsd",
    "pmpsadbw",
    // aesni
    "aesdec",
    "aesdeclast",
    "aesenc",
    "aesenclast",
    "aesimc",
    "aeskeygenassist",
    "pclmulqdq",
    // sha1
    "sha1msg1",
    "sha1msg2",
    "sha1nexte",
    "sha1rnds4",
    "sha256msg1",
    "sha256msg2",
    "sha256rnds2",
    "crc32",
    // bmi1, bmi2
    "blsmsk",
    "blsr",
    "clac",
    "stac",
];

pub const X86_GRP_FLOAT_CMP: [&str; 39] = [
    // floating point compare instructions
    "fcom", "fcomp", "fcompp", "fucom", "fucomp", "fucompp", "ficom", "ficomp", "fcomi", "fucomi",
    "fcomip", "fucomip", "ftst", "fxam", // sse
    "cmpps", "cmpeqps", "cmpneqps", "cmpltps", "cmpnltps", "cmpss", "cmpeqss", "cmpneqss",
    "cmpltss", "cmpnltss", "comiss", "ucomiss", "cmppd", "cmpeqpd", "cmpneqpd", "cmpltpd",
    "cmpnltpd", "cmpsd", "cmpeqsd", "cmpneqsd", "cmpltsd", "cmpnltsd", "comisd", "ucomisd",
    // vector
    "vpcmp",
];

pub const X86_GRP_FLOAT_ARITH: [&str; 87] = [
    // - floating point instructions:
    "fadd", "faddp", "fiadd", "fsub", "fsubp", "fisub", "fsubr", "fsubrp", "fisubr", "fmul",
    "fmulp", "fimul", "fdiv", "fdivp", "fidiv", "fdivr", "fdivrp", "fidivr", "fprem", "fprem1",
    "fabs", "fchs", "frndint", "fscale", "fsqrt", "fxtract",
    // floating point transcendental instructions
    "fsin", "fcos", "fsincos", "fptan", "fpatan", "f2xm1", "fyl2x", "fyl2xp1",
    // fpu register related
    "fincstp", "fdecstp", // sse
    "addps", "addss", "subps", "subss", "mulps", "mulss", "divps", "divss", "rcpps", "rcpss",
    "sqrtps", "sqrtss", "rsqrtps", "rsqrtss", "maxps", "maxss", "minps", "minss",
    // sse2
    "addsd", "subsd", "mulsd", "divsd", "rcpsd", "sqrtsd", "rsqrtsd", "maxsd", "minsd",
    // sse3
    "addsubps", "addsubpd", "haddps", "hsubps", "haddpd", "hsubpd", // sse4
    "dppd", "dpps", // vector
    "vpmax", "vpmin", "vrcp", "vrndscal", "vrsqrt", "vscale", "addpd", "addsd", "mulpd", "mulsd",
    "subpd", "subsd", "divpd", "divsd", "rcppd", "rcpsd",
];

pub const X86_GRP_CMP: [&str; 25] = [
    "cmp",
    "comi",
    "clt",
    // from dtransfer
    "cmpxchg",
    "cmpxchg8b",
    // from bit
    "test",
    // from string
    "cmps",
    "cmpsb",
    "cmpsd",
    "cmpsw",
    // mmx
    "pcmpeqb",
    "pcmpeqw",
    "pcmpeqd",
    "pcmpgtb",
    "pcmpgtw",
    "pcmpgtd",
    // sse4
    "phminposuw",
    "ptest",
    "pcmpeqq",
    // sse4.2
    "pcmpestri",
    "pcmpestrm",
    "pcmpistri",
    "pcmpistrm",
    "pcmpgtq",
    // vector
    "vptest",
];

// Shift and Rotate Instructions:
pub const X86_GRP_SHIFT: [&str; 29] = [
    // general purpose instructions
    "sar", "shr", "sal", "shl", "shrd", "shld", "ror", "rol", "rcr", "rcl",
    // bmi1, bmi2
    "rorx", "sarx", "shlx", "shrx", // mmx
    "psllw", "pslld", "psllq", "psrlw", "psrld", "psrlq", "psraw", "psrad",
    // sse2 128-bit integer
    "pslldq", "psrldq", // vector
    "vprol", "vpror", "vpsra", "vpsll", "vpsra",
];

// Logical Instructions:
pub const X86_GRP_LOGIC: [&str; 18] = [
    // general purpose instructions
    "and", "not", "or", "xor",  // bmi1, bmi2
    "andn", // mmx
    "pand", "pandn", "por", "pxor", // sse
    "andps", "andnps", "orps", "xorps", // sse2
    "andpd", "andnpd", "orpd", "xorpd", // vector
    "vpterlog",
];

// bit and byte instructions:
pub const X86_GRP_BIT: [&str; 46] = [
    // general purpose instructions
    "seta", "setae", "setb", "setbe", "setc", "sete", "setg", "setge", "setl", "setle", "setna",
    "setnae", "setnb", "setnbe", "setnc", "setne", "setng", "setnge", "setnl", "setnle", "setno",
    "setnp", "setns", "setnz", "seto", "setp", "setpe", "setpo", "sets", "setz", "test", "crc32",
    // bmi1, bmi2
    "blsmsk", "blsr", "clac", "stac", // from bit
    "test", "bt", "bts", "btr", "btc", "bsf", "bsr", "popcnt", "tzcnt", "lzcnt",
];

// control transfer instructions:
pub const X86_GRP_CTRANSFER: [&str; 36] = [
    // general purpose instructions
    "jmp", "call", "ret", "iret", "int", "into", "bound", "enter", "leave", // flag
    "cli", "sti",   // sse2
    "pause", // sse3
    "monitor", "mwait", "xabort", "xacquire", "xrelease", "xbegin", "xend", "xtest", "hlt",
    "syscall", "sysenter", "sysexit", "sysret", "fwait", "wait",
    // vm related instructions
    "vmcall", "vmlaunch", "vmmcall", "vmresume", "vmrun", "vmfunc", "vmclear", "vmxon", "vmxoff",
];

pub const X86_GRP_COND_CTRANSFER: [&str; 44] = [
    // general purpose instructions
    "ja",
    "jae",
    "jb",
    "jbe",
    "jc",
    "jcxz",
    "je",
    "jecxz",
    "jrcxz",
    "jg",
    "jge",
    "jl",
    "jle",
    "jnae",
    "jnb",
    "jnbe",
    "jnc",
    "jne",
    "jng",
    "jnge",
    "jnl",
    "jnle",
    "jno",
    "jnp",
    "jns",
    "jnz",
    "jo",
    "jp",
    "jpe",
    "jpo",
    "js",
    "jz",
    "loop",
    "loope",
    "loopne",
    "loopnz",
    "loopz",
    // string
    "rep",
    "rep movsq",
    "rep stosq",
    "repne",
    "repnz",
    "repe",
    "repz",
];

// ==================== ARM 32 =============================================
pub const ARM_GRP_DTRANSFER: [&str; 101] = [
    // general purpose instructions
    "lda", "adr", "adrp", "ldr", "ldrd", "ldrb", "ldrbt", "ldrh", "ldrs", "ldrsb", "ldrsbt",
    "ldrsh", "ldrsht", "ldrt", "ldrht", "str", "strb", "strd", "strh", "strbt", "strt", "ldm",
    "ldmda", "ldmdb", "ldmib", "stm", "stmda", "stmdb", "stmib", "pld", "swp", "mov", "movi",
    "movk", "movz", "movt", "movn", "mvn", "mvni", "stp", "ldp", "rfeib",
    // coprocessor data operations
    "cdp", "mcr", "mcrr", "mrc", "mrr", "ldc", "ldcl", "stc", "stcl", "push", "sbfx", "sbfiz",
    "bfx", "bfxil", "ubfx", "ubfiz", "vld", "vst", "vst2", "vstmdb", "vtbl", "vtbx", "zip", "zip1",
    "zip2", "uzp", "uzp1", "uzp2", "xtn", "xtn2", "csel", "ld1", "ld2", "ld4", "st1", "st2", "st4",
    "ldpsw", "ldrsw", "sxtab", "sxtb", "sxth", "sxtw", "ext", "extr", "ins", "uxtab", "uxtb",
    "uxth", "uxtw", "bfc", "bfi", "bic", "clz", "rev", "rev16", "rev32", "rev64", "cset",
];

pub const ARM_GRP_FLOAT_DTRANSFER: [&str; 33] = [
    // floating point data transfer instructions
    "fcpy", "fcvtms", "fcvtmu", "fcvtzs", "fcvtzu", "fcvt", "fld", "fst", "fmr", "fmd", "fms",
    "fmx", "fsito", "fuito", "ftosi", "ftoui", "fmov", "umov", "ldur", "ldurb", "ldurh", "ldursb",
    "ldursh", "ldursw", "stur", "sturb", "sturh", "stursb", "stursh", "stursw", "dup", "scvtf",
    "ucvtf",
];

pub const ARM_GRP_MISC: [&str; 13] = [
    "udf", "nop", "mrs", "msr", "mar", "mra", "vmrs", "vmsr", "dbg", "dmb", "dsb", "isb", "setend",
];

// binary arithmetic instructions:
pub const ARM_GRP_ARITH: [&str; 106] = [
    // general purpose instructions
    "add", "addw", "addp", "addv", "adc", "sub", "sbc", "rsb", "rsc", "cmn", "clz", "mul", "mla",
    "mls", "cinc", "cinv", "neg", "negs", "div", "smax", "smaxv", "smin", "sminv", "umull",
    "umlal", "umlal2", "smla", "smlal", "smlaltt", "smul", "smsub", "madd", "mneg", "msub",
    "smaddl", "smnegl", "smsubl", "smulh", "smull", "umaddl", "umnegl", "umsubl", "umulh", "umull",
    "sdiv", "udiv", "mia", "qadd", "qsub", "qdadd", "qdsub", "qasx", "sadd", "saddw", "saddw2",
    "sasx", "shadd", "shasx", "smlsd", "smmla", "smuad", "smusd", "ssub", "sat", "sax", "uadd",
    "uaddw", "uaddw2", "usat", "usax", "uasx", "uhadd", "uhasx", "umlsd", "ummla", "uqadd",
    "uqsax", "uqsub", "uhsax", "vaba", "vabd", "max", "min", "vmla", "vmls", "vnmul", "vnmla",
    "vnmls", "vfms", "vfms", "vfma", "vfms", "vfnma", "vfnms", "vrecpe", "vsqrt", "vqrsh", "umull",
    "umaal", "umlal", "usada8", "vneg", "cneg", "csinc", "csinv", "csneg",
];

pub const ARM_GRP_FLOAT_ARITH: [&str; 26] = [
    // floating point arithmetic instructions
    "fabs", "fabd", "fadd", "fsub", "fdiv", "fmul", "fnmul", "fsqrt", "fmac", "fnmac", "fmsc",
    "fnmsc", "fneg", "fmadd", "fmsub", "fnmadd", "fnmsub", "fpint", "fcsel", "fmax", "fmin",
    "fmla", "fmls", "frintm", "frintp", "frint",
];

pub const ARM_GRP_SHIFT: [&str; 17] = [
    // shift operations
    "asr", "lsl", "lsr", "ror", "rrx", "pkhbt", "pkhtb", "shl", "ushl", "ushll", "ushll2", "ushr",
    "usra", "sshl", "sshll", "sshll2", "sshr",
];

pub const ARM_GRP_CMP: [&str; 14] = [
    // compare instructions
    "cmeq", "cmgt", "cmhi", "cmhs", "cmp", "ccmn", "ccmp", "vceq", "vcge", "vcgt", "vcle", "vclt",
    // from bit
    "tst", "teq",
];

pub const ARM_GRP_FLOAT_CMP: [&str; 8] = [
    "vcmp", "vcmpe", "fcmpe", "fcmgt", "fcm", "fcmp", "fccmp", "vcm",
];

// Logical Instructions:
pub const ARM_GRP_LOGIC: [&str; 5] = ["and", "orr", "eor", "eon", "orn"];

// bit and byte instructions:
pub const ARM_GRP_BIT: [&str; 15] = [
    "tst", "teq", "bsl", "bif", "bit", "bfc", "bfi", "bic", "clz", "rbit", "rev", "rev16", "rev32",
    "rev64", "cset",
];

// control transfer instructions:
pub const ARM_GRP_CTRANSFER: [&str; 29] = [
    "b", "br", "bl", "blr", "bx", "blx", "bxj", "bal", "blal", "bxal", "blxal", "bxjal", "swi",
    "bkpt", "ret", "yield", "wfe", "wfi", "sev", "sevl", "cps", "brk", "hlt", "svc", "hvc", "smc",
    "trap", "eret", // arm pop is return
    "pop",
];

pub const ARM_GRP_COND_CTRANSFER: [&str; 74] = [
    "beq", "bne", "bcs", "bcc", "bmi", "bpl", "bvs", "bvc", "bhi", "bls", "bge", "blt", "bgt",
    "ble", "bleq", "blne", "blcs", "blcc", "blmi", "blpl", "blvs", "blvc", "blhi", "blls", "blge",
    "bllt", "blgt", "blle", "bxeq", "bxne", "bxcs", "bxcc", "bxmi", "bxpl", "bxvs", "bxvc", "bxhi",
    "bxls", "bxge", "bxlt", "bxgt", "bxle", "blxeq", "blxne", "blxcs", "blxcc", "blxmi", "blxpl",
    "blxvs", "blxvc", "blxhi", "blxls", "blxge", "blxlt", "blxgt", "blxle", "bxjeq", "bxjne",
    "bxjcs", "bxjcc", "bxjmi", "bxjpl", "bxjvs", "bxjvc", "bxjhi", "bxjls", "bxjge", "bxjlt",
    "bxjgt", "bxjle", "tbz", "tbnz", // combined instructions
    "cbz", "cbnz",
];

// ==================== MIPS 32 =============================================
// data transfer
// refernce : https://www.cs.cornell.edu/courses/cs3410/2008fa/MIPS_Vol2.pdf
pub const MIPS_GRP_DTRANSFER: [&str; 75] = [
    "lb", "lbu", "lh", "lhu", "ll", "lw", "lwu", "ld", "ldl", "ldr", "lwl", "lwr", "pref", "sb",
    "sc", "sd", "sdl", "sdr", "sh", "st", "sw", "swl", "swr", "sync", "lui", "ldxc1", "lwxc1",
    "sdxc1", "swxc1", "mfhi", "mflo", "mov", "movf", "movn", "movt", "movz", "mthi", "mtlo",
    "move", "cvt", "ldc", "lwc", "sdc", "swc", // move
    "cfc", "ctc", "mfc", "mtc", "pref", "sync", "splat", "cfcmsa", "ctcmsa", "copy", "push", "seh",
    "seb", "wsbh", "dsbh", "dshd", "mtc0", "mfc0", "ldc3", "lwc3", "sdc3", "swc3",
    // coprocessor load, store
    "cop2", "ldc2", "lwc2", "sdc2", "swc2", // cop move
    "cfc2", "ctc2", "mfc2", "mtc2",
];

pub const MIPS_GRP_FLOAT_DTRANSFER: [&str; 34] = [
    // floating point
    "frint", "fclass", // load, store, memory
    "ldc1", "lwc1", "sdc1", "swc1", // move
    "cfc1", "ctc1", "mfc1", "fmov", "movf", "movn", "movt", "movz", "mtc1", // convert
    "fex", "ffint", "ffq", "ftint", "ftrun", "ftq", "fcvt", "floor", "round", "trunc", "ffloor",
    "fround", "ftrunc", "dmfc", "dmfc1", "dmtc", "dmtc1", "mthc1", "mfhc1",
];

// binary arithmetic instructions:
pub const MIPS_GRP_ARITH: [&str; 57] = [
    // general purpose instructions
    "add", "addi", "addu", "addiu", "sub", "subu", "mul", "mult", "multu", "clo", "clz", "div",
    "divu", "madd", "maddu", "msub", "msubu", "aadd", "asub", "abs", "neg", "negu",
    // additional
    "daa", "dsub", "dsubu", "dsubiu", "ddiv", "ddivu", "ddiviu", "dmul", "dmult", "dmultu", "dotp",
    "dpadd", "dpsub", "madd", "max", "min", "msub", "mod", "sat", "hsub", "sqrt", "aui", "daui",
    "dahi", "dati", "addiupc", "auipc", "aluipc", "dadd", "daddu", "daddiu", "dclz",
    // from bit
    "bmz", "bmn", "bneg",
];

pub const MIPS_GRP_CMP: [&str; 45] = [
    "slt", "slti", "sltiu", "sltu", // compare instructions
    "cmp", "ceq", "cle", "clt", "cf", "cun", "ceq", "cueq", "colt", "cult", "cole", "cule", "csf",
    "cngle", "cseq", "cngl", "clt", "cnge", "cle", "cngt", "cmp", "ceq", "cle", "clt", "cf", "cun",
    "ceq", "cueq", "colt", "cult", "cole", "cule", "csf", "cngle", "cseq", "cngl", "clt", "cnge",
    "cle", "cngt", "c",
];

pub const MIPS_GRP_FLOAT_CMP: [&str; 3] = [
    // floating point compare instructions
    "facf", "fc", "fs",
];

pub const MIPS_GRP_SHIFT: [&str; 25] = [
    // shift operation
    "sll", "sllv", "srl", "srlv", "sra", "srav", "shl", "shr", "sld", "dsll", "dsll32", "dsllv",
    "dsra", "dsra32", "dsrav", "dsrl", "dsrl32", "dsrlv", "rotr", "rotrv", "drotr", "drotr32",
    "drotrv", "lsa", "dlsa",
];

pub const MIPS_GRP_FLOAT_ARITH: [&str; 19] = [
    // floating point
    "fabs", "fadd", "fdiv", "fmadd", "fmsub", "fmul", "fneg", "fnmadd", "fnmsub", "fexp", "flog",
    "fmax", "fmin", "frcp", "recip", "frecip", "frsqrt", "fsqrt", "fsub",
];

// Logical Instructions:
pub const MIPS_GRP_LOGIC: [&str; 8] = ["and", "andi", "nor", "or", "not", "ori", "xor", "xori"];

// bit and byte instructions:
pub const MIPS_GRP_BIT: [&str; 14] = [
    "bins", "dins", "dext", "ext", "ins", "bmz", "bmn", "bneg", "bsel", "bset", "bclr",
    // bit wise count
    "nloc", "nlzc", "pcnt",
];

pub const MIPS_GRP_MISC: [&str; 7] = ["nop", "ssnop", "cache", "tlbp", "tlbr", "tlbwi", "tlbwr"];

// control transfer instructions:
pub const MIPS_GRP_CTRANSFER: [&str; 32] = [
    "b", "bal", "j", "jal", "jr", "jalr", "break", "syscall", "pause", "wait", "hlt", "eret",
    "deret", "sdbbp", "bkpt", "ret", "mfc0", "mtc0", // mips pop is return
    "pop",  // float
    "bc1", "bc1f", "bc1t", "bc1fl", "bc1tl", // cop
    "bc2f", "bc2t", "bc2fl", "bc2tl", "bc3f", "bc3t", "bc3fl", "bc3tl",
];

pub const MIPS_GRP_COND_CTRANSFER: [&str; 33] = [
    "beq", "beqz", "bne", "bge", "bgez", "bgezal", "bgtz", "blez", "bltz", "bltzal", "bnel",
    "bnez", "bnz", "teq", "teqi", "tge", "tgei", "tgeiu", "tgeu", "tlt", "tlti", "tltiu", "tltu",
    "tne", "tnei", "beql", "bgezall", "bgezl", "bgtzl", "blezl", "bltzall", "bltzl", "bnel",
];

// ================= POWERPC 32 =============================================
// data transfer
// reference : https://www.ibm.com/docs/en/aix/7.3?topic=reference-appendix-f-powerpc-instructions
// reference : https://files.openpower.foundation/s/dAYSdGzTfW4j2r2
pub const PPC_UNKOWN: [&str; 8] = [
    // condition register _
    "creqv", "crmove", "crnot", "crset", "mcrf", // move condition register field
    "eqv", "isync", // instruction synccccchronize
    // unknown 64-bit
    "vsel",
];

pub const PPC_GRP_DTRANSFER: [&str; 178] = [
    // load
    "la",
    // load byte
    "lbz",
    "lbzcix",
    "lbzu",
    "lbzux",
    "lbzx",
    // load double
    "ld",
    "ldarx",
    "ldbrx",
    "ldcix",
    "ldu",
    "ldux",
    "ldx",
    // load half
    "lha",
    "lhau",
    "lhaux",
    "lhax",
    "lhbrx",
    "lhz",
    "lhzcix",
    "lhzu",
    "lhzux",
    "lhzx",
    // load immediate
    "li",
    "lis",
    "lmw",
    "lswi",
    // load vector
    "lvebx",
    "lvehx",
    "lvewx",
    "lvsl",
    "lvsr",
    "lvx",
    "lvxl",
    // load word
    "lwa",
    "lwarx",
    "lwaux",
    "lwax",
    "lwbrx",
    "lwsync",
    "lwz",
    "lwzcix",
    "lwzu",
    "lwzux",
    "lwzx",
    // load vsx
    "lxsdx",
    "lxvd2x",
    "lxvdsx",
    "lxvw4x",
    // store byte
    "stb",
    "stbcix",
    "stbu",
    "stbux",
    "stbx",
    // store double
    "std",
    "stdbrx",
    "stdcix",
    "stdcx",
    "stdu",
    "stdux",
    "stdx",
    // store half word
    "sth",
    "sthbrx",
    "sthcix",
    "sthu",
    "sthux",
    "sthx",
    "stmw",
    "stswi",
    // store vector
    "stvebx",
    "stvehx",
    "stvewx",
    "stvx",
    "stvxl",
    // store word
    "stw",
    "stwbrx",
    "stwcix",
    "stwcx",
    "stwu",
    "stwux",
    "stwx",
    // store vsx
    "stxsdx",
    "stxvd2x",
    "stxvw4x",
    "mr",
    // move from
    "mfamr",
    "mfasr",
    "mfbr0",
    "mfbr1",
    "mfbr2",
    "mfbr3",
    "mfbr4",
    "mfbr5",
    "mfbr6",
    "mfbr7",
    "mfcfar",
    "mfcr",
    "mfctr",
    "mfdar",
    "mfdbatl",
    "mfdbatu",
    "mfdccr",
    "mfdcr",
    "mfdear",
    "mfdscr",
    "mfdsisr",
    "mfesr",
    "mffs",
    "mfibatl",
    "mfibatu",
    "mficcr",
    "mflr",
    "mfmsr",
    "mfocrf",
    "mfpid",
    "mfpvr",
    "mfrtcl",
    "mfrtcu",
    "mfspefscr",
    "mfspr",
    "mfsr",
    "mfsrin",
    "mfsrr2",
    "mfsrr3",
    "mftb",
    "mftbhi",
    "mftblo",
    "mftbu",
    "mftcr",
    "mfvscr",
    "mfxer",
    // move to
    "mtamr",
    "mtbr0",
    "mtbr1",
    "mtbr2",
    "mtbr3",
    "mtbr4",
    "mtbr5",
    "mtbr6",
    "mtbr7",
    "mtcfar",
    "mtcr",
    "mtcrf",
    "mtctr",
    "mtdar",
    "mtdbatl",
    "mtdbatu",
    "mtdccr",
    "mtdcr",
    "mtdear",
    "mtdscr",
    "mtdsisr",
    "mtesr",
    "mtfsb0",
    "mtfsb1",
    "mtfsf",
    "mtfsfi",
    "mtibatl",
    "mtibatu",
    "mticcr",
    "mtlr",
    "mtmsr",
    "mtmsrd",
    "mtocrf",
    "mtpid",
    "mtspefscr",
    "mtspr",
    "mtsr",
    "mtsrin",
    "mtsrr2",
    "mtsrr3",
    "mttbhi",
    "mttbl",
    "mttblo",
    "mttbu",
    "mttcr",
    "mtvscr",
    "mtxer",
];

pub const PPC_GRP_FLOAT_DTRANSFER: [&str; 25] = [
    "fmr", "lfd", "lfdu", "lfdux", "lfdx", "lfiwax", "lfiwzx", "lfs", "lfsu", "lfsux", "lfsx",
    "stfd", "stfdu", "stfdux", "stfdx", "stfiwx", "stfs", "stfsu", "stfsux", "stfsx",
    // vector merge
    "vmrghb", "vmrglb", // vector pack
    "vpkuhum", "vpkuwum", // vector permute
    "vperm",
];

// binary arithmetic instructions:
pub const PPC_GRP_ARITH: [&str; 28] = [
    "neg", "add", "addc", "adde", "addi", "addic", "addis", "addme", "addze", "divd", "divdu",
    "divw", "divwu", "mulhd", "mulhdu", "mulhw", "mulhwu", "mulld", "mulli", "mullw", "sub",
    "subc", "subf", "subfc", "subfe", "subfic", "subfme", "subfze",
];

// floating point arithmetic instructions
pub const PPC_GRP_FLOAT_ARITH: [&str; 24] = [
    "fabs", "fmadd", "fmsub", "fneg", "fadd", "fadds", "fdiv", "fdivs", "fmul", "fmuls", "fsub",
    "fsubs", "frsp",  // floating round to single-precision
    "fsqrt", // floating convert
    "fcfid", "fctidz", "fctiwz", // vector add
    "vaddubm", "vadduhm", "vadduwm", // vector multiply
    "vmsumuhm", "vmulouh", // vector subtract
    "vsubuhs", "vsubuwm",
];

pub const PPC_GRP_CMP: [&str; 9] = [
    "cmpb", "cmpd", "cmpdi", "cmpld", "cmpldi", "cmplw", "cmplwi", "cmpw", "cmpwi",
];

// floating point compare instructions
pub const PPC_GRP_FLOAT_CMP: [&str; 8] = [
    "fcmpo", "fcmpu", // vector compare
    "vcmpequb", "vcmpequw", "vcmpgtsh", "vcmpgtsw", "vcmpgtub", "vcmpgtuw",
];

// shift operation
pub const PPC_GRP_SHIFT: [&str; 43] = [
    "rotlw", "rotlwi", "rotld", "rotldi", "slbia", "slbie", "slbmfee", "slbmte", "sld", "sldi",
    "slw", "slwi", "srad", "sradi", "sraw", "srawi", "srd", "srw", "srwi", "rldcl", "rldcr",
    "rldic", "rldicl", "rldicr", "rldimi", "rlwimi", "rlwinm", "rlwnm",
    // vector shift left
    "vslb", "vsldoi", "vslh", "vslw", // vector splat
    "vspltb", "vsplth", "vspltisb", "vspltish", "vspltisw", "vspltw",
    // vector shift right
    "vsraw", "vsrb", "vsrh", "vsrw", // vector rotate
    "vrlw",
];

// Logical Instructions:
pub const PPC_GRP_LOGIC: [&str; 49] = [
    "not", "and", "andc", "andi", "andis", "crand", "crandc", "crnand", "crnor", "cror", "crorc",
    "crxor", "evand", "evandc", "evnand", "evnor", "evor", "evorc", "evxor", "nand", "nor", "or",
    "orc", "ori", "oris", "qvfand", "qvfandc", "qvfnand", "qvfnor", "qvfor", "qvforc", "qvfxor",
    "vand", "vandc", "vnand", "vnor", "vor", "vorc", "vxor", "xor", "xori", "xoris", "xxland",
    "xxlandc", "xxlnand", "xxlnor", "xxlor", "xxlorc", "xxlxor",
];

// bit and byte instructions:
pub const PPC_GRP_BIT: [&str; 8] = [
    // condition register clear
    "crclr", // count leading zeros
    "cntlzd", "cntlzw", // clear high-order bits register
    "clrldi", "clrlwi", // extend sign
    "extsb", "extsw", "extsh",
];

pub const PPC_GRP_MISC: [&str; 1] = ["nop"];

// control transfer instructions:
pub const PPC_GRP_CTRANSFER: [&str; 26] = [
    "b", "bl", "bctrl", "bctr", "bla", "blr", "blrl", "ba", "sc", // trap
    "trap", "tw", "tweq", "tweqi", "twgt", "twgti", "twi", "twlgt", "twlgti", "twllt", "twllti",
    "twlt", "twlti", "twne", "twnei", "twu", "twui",
];

pub const PPC_GRP_COND_CTRANSFER: [&str; 61] = [
    "bc", "bca", "bcctr", "bcctrl", "bcl", "bcla", "bclr", "bclrl", "bct", "bdnz", "bdnza",
    "bdnzf", "bdnzfa", "bdnzfl", "bdnzfla", "bdnzflrl", "bdnzl", "bdnzla", "bdnzlr", "bdnzlrl",
    "bdnzt", "bdnzta", "bdnztl", "bdnztla", "bdnztlr", "bdnztlrl", "bdz", "bdza", "bdzf", "bdzfa",
    "bdzfl", "bdzfla", "bdzflr", "bdzflrl", "bdzl", "bdzla", "bdzlr", "bdzlrl", "bdzt", "bdzta",
    "bdztl", "bdztla", "bdztlr", "bdztlrl", "bf", "bfa", "bfctr", "bfctrl", "bfl", "bfla", "bflr",
    "bflrl", "brinc", "bt", "bta", "btctr", "btctrl", "btl", "btla", "btlr", "btlrl",
];
